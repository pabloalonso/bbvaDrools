<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:connectorconfiguration="http://wwww.bonitasoft.org/model/connector/configuration" xmlns:decision="http://www.bonitasoft.org/ns/studio/process/decision" xmlns:definition="http://www.bonitasoft.org/ns/connector/definition/6.1" xmlns:expression="http://www.bonitasoft.org/ns/studio/expression" xmlns:notation="http://www.eclipse.org/gmf/runtime/1.0.2/notation" xmlns:parameter="http://www.bonitasoft.org/ns/studio/parameter" xmlns:process="http://www.bonitasoft.org/ns/studio/process" xsi:schemaLocation="http://www.bonitasoft.org/ns/studio/process/decision http://www.bonitasoft.org/ns/studio/process#//decision">
  <process:MainProcess xmi:id="_WFKe8I6OEei8kvcpw0fSig" name="AutomaticProcess1" author="Personal" bonitaVersion="7.7.2" bonitaModelVersion="7.6.0-002" configId="ACED00057400214175746F6D6174696350726F6365737331372E362E302D303032372E372E327370">
    <elements xmi:type="process:Pool" xmi:id="_WFKe8Y6OEei8kvcpw0fSig" name="VALIDACION_INGRESOS" welcomePageInternal="false" basedOnLookAndFeel="Default Application">
      <elements xmi:type="process:Lane" xmi:id="_WFKe8o6OEei8kvcpw0fSig" name="System">
        <elements xmi:type="process:StartEvent" xmi:id="_WFKe846OEei8kvcpw0fSig" name="Start" outgoing="_WFKfGI6OEei8kvcpw0fSig">
          <viewPageFlowRedirectionURL xmi:type="expression:Expression" xmi:id="_WFKe9I6OEei8kvcpw0fSig" name="" content="" returnTypeFixed="true"/>
          <dynamicLabel xmi:type="expression:Expression" xmi:id="_WFKe9Y6OEei8kvcpw0fSig" name="" content="" returnTypeFixed="true"/>
          <dynamicDescription xmi:type="expression:Expression" xmi:id="_WFKe9o6OEei8kvcpw0fSig" name="" content="" returnTypeFixed="true"/>
          <stepSummary xmi:type="expression:Expression" xmi:id="_WFKe946OEei8kvcpw0fSig" name="" content="" returnTypeFixed="true"/>
        </elements>
        <elements xmi:type="process:EndEvent" xmi:id="_PVQmgI6QEeiCd4A7RChmhg" name="End" incoming="_dH7JMJTzEeimyMrxtKzKVw">
          <viewPageFlowRedirectionURL xmi:type="expression:Expression" xmi:id="_PVZJYo6QEeiCd4A7RChmhg" name="" content="" returnTypeFixed="true"/>
          <dynamicLabel xmi:type="expression:Expression" xmi:id="_PVZJYI6QEeiCd4A7RChmhg" name="" content="" returnTypeFixed="true"/>
          <dynamicDescription xmi:type="expression:Expression" xmi:id="_PVYiUI6QEeiCd4A7RChmhg" name="" content="" returnTypeFixed="true"/>
          <stepSummary xmi:type="expression:Expression" xmi:id="_PVZJYY6QEeiCd4A7RChmhg" name="" content="" returnTypeFixed="true"/>
        </elements>
        <elements xmi:type="process:ServiceTask" xmi:id="_PLYGMI6aEeiCd4A7RChmhg" name="SOI-ACH" outgoing="_hGtO8JA9EeiFubttvGmCkQ" incoming="_WFKfGI6OEei8kvcpw0fSig">
          <viewPageFlowRedirectionURL xmi:type="expression:Expression" xmi:id="_WFKe-Y6OEei8kvcpw0fSig" name="" content="" returnTypeFixed="true"/>
          <dynamicLabel xmi:type="expression:Expression" xmi:id="_WFKe-o6OEei8kvcpw0fSig" name="" content="" returnTypeFixed="true"/>
          <dynamicDescription xmi:type="expression:Expression" xmi:id="_WFKe-46OEei8kvcpw0fSig" name="" content="" returnTypeFixed="true"/>
          <stepSummary xmi:type="expression:Expression" xmi:id="_WFKe_I6OEei8kvcpw0fSig" name="" content="" returnTypeFixed="true"/>
          <connectors xmi:type="process:Connector" xmi:id="_jnSdsJUREeimyMrxtKzKVw" name="organizeByNit()" definitionId="scripting-groovy-script" event="ON_ENTER" definitionVersion="1.0.1">
            <configuration xmi:type="connectorconfiguration:ConnectorConfiguration" xmi:id="_jnSdsZUREeimyMrxtKzKVw" definitionId="scripting-groovy-script" version="1.0.1" modelVersion="7.4.0-004">
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_jnSdspUREeimyMrxtKzKVw" key="script">
                <expression xmi:type="expression:Expression" xmi:id="_jnSds5UREeimyMrxtKzKVw" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnTypeFixed="true"/>
              </parameters>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_jnSdtJUREeimyMrxtKzKVw" key="variables"/>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_jnSdtZUREeimyMrxtKzKVw" key="fakeScriptExpression">
                <expression xmi:type="expression:Expression" xmi:id="_jnSdtpUREeimyMrxtKzKVw" name="organizeByNit()" content="import com.bbva.cnmc.proxyaso.controller.ProxyASOController;&#xD;&#xA;import com.bbva.cnmc.proxyaso.dto.aso.AsoDTO;&#xD;&#xA;import com.bbva.cnmc.proxyaso.dto.aso.GrantingTicketDTO;&#xD;&#xA;import com.fasterxml.jackson.databind.ObjectMapper&#xD;&#xA;import com.fasterxml.jackson.databind.DeserializationFeature;&#xD;&#xA;import java.util.logging.Level;&#xD;&#xA;import java.util.logging.Logger;&#xD;&#xA;import javax.print.attribute.standard.MediaName;&#xD;&#xA;import org.apache.commons.lang.StringUtils;&#xD;&#xA;import org.springframework.context.ApplicationContext;&#xD;&#xA;import org.springframework.context.support.ClassPathXmlApplicationContext;&#xD;&#xA;import org.springframework.http.HttpEntity;&#xD;&#xA;import org.springframework.http.HttpHeaders;&#xD;&#xA;import org.springframework.http.HttpMethod;&#xD;&#xA;import org.springframework.http.MediaType;&#xD;&#xA;import org.springframework.http.ResponseEntity;&#xD;&#xA;import org.springframework.web.client.RestTemplate;&#xD;&#xA;&#xD;&#xA;//Function for setting the employmentSituation according to table given by Functional Design&#xD;&#xA;public String tipoCotizante(String tipo, Map parametros){&#xD;&#xA;&#x9;String out;&#xD;&#xA;&#x9;for(int i = 0; i &lt; parametros.equivalencias.size(); i++){&#xD;&#xA;&#x9;&#x9;if(tipo.equals(parametros.equivalencias[i].tipo)){&#xD;&#xA;&#x9;&#x9;&#x9;out = parametros.equivalencias[i].valor;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return out;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//Logger and mapper configuration&#xD;&#xA;Logger LOGGER = Logger.getLogger(&quot;InfoLogging&quot;);&#xD;&#xA;LOGGER.info(&quot;Logging an INFO-level message: Classification of payments by NIT&quot;);&#xD;&#xA;ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#xD;&#xA;ObjectMapper mapper = new ObjectMapper();&#xD;&#xA;mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);&#xD;&#xA;&#xD;&#xA;//ASO configuration&#xD;&#xA;AsoDTO asoDto = (AsoDTO) context.getBean(&quot;asoDto&quot;);&#xD;&#xA;asoDto.setGrantingTicketDTO(grantingTicketDTO);&#xD;&#xA;asoDto.setAsoBaseUrl(validacionIngresos.getExecutions()[0].getEndpoint());&#xD;&#xA;asoDto.setAsoMediaType(MediaType.APPLICATION_JSON);&#xD;&#xA;&#xD;&#xA;//Obtaining input payload from SOI-ACH service&#xD;&#xA;ProxyASOController controller = (ProxyASOController) context.getBean(&quot;proxyASOController&quot;);&#xD;&#xA;asoDto.setOperacionHttpServicio(HttpMethod.GET);&#xD;&#xA;String peticionHttp = controller.procesarPeticionGetHTTP(asoDto);&#xD;&#xA;Map readValue = mapper.readValue(peticionHttp, Map.class);&#xD;&#xA;&#xD;&#xA;//Creating output payload&#xD;&#xA;Map&lt;Object, Object> outPayload = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#xD;&#xA;//Setting parameters TipoCotizante&#xD;&#xA;Map p = mapper.readValue(pTipoCotizante,Map.class);&#xD;&#xA;&#xD;&#xA;//Section 1: Map of all payments sorted by NIT (in the last six months)&#xD;&#xA;if(readValue.workPlaces){&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;//Date treatments&#xD;&#xA;&#x9;Date todayDate = Date.parse(&quot;yyyy-MM-dd&quot;,new Date().format(&quot;yyyy-MM-dd&quot;));&#x9;// Date today&#xD;&#xA;&#x9;String todayDateStr = todayDate.format(&quot;yyyy-MM-dd&quot;);&#xD;&#xA;&#x9;int cYear = Integer.parseInt(todayDateStr.split(&quot;-&quot;)[0]);&#x9;&#x9;&#x9;&#x9;&#x9;//Current Year&#xD;&#xA;&#x9;int cMonth = Integer.parseInt(todayDateStr.split(&quot;-&quot;)[1]);&#x9;&#x9;&#x9;&#x9;&#x9;//Current Month&#xD;&#xA;&#x9;int year = 0;&#xD;&#xA;&#x9;int month = 0;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;if(cMonth &lt;= 6){&#xD;&#xA;&#x9;&#x9;year = cYear - 1;&#xD;&#xA;&#x9;&#x9;month = cMonth + 6;&#xD;&#xA;&#x9;}else{&#xD;&#xA;&#x9;&#x9;month = cMonth - 6;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String currentYear = String.valueOf(cYear);&#xD;&#xA;&#x9;String currentMonth = String.valueOf(cMonth);&#xD;&#xA;&#x9;String past6Year = String.valueOf(year);&#xD;&#xA;&#x9;String past6Month = String.valueOf(month);&#xD;&#xA;&#x9;Date firstDay = Date.parse(&quot;yyyy-MM-dd&quot;,past6Year + &quot;-&quot; + past6Month + &quot;-&quot; + &quot;01&quot;);  &#x9;//Date of first day of month (6 months ago)&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;double value = 0.0;&#xD;&#xA;&#x9;String paymentNit;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;for(int i = 0; i &lt; readValue.workPlaces.size(); i++){&#xD;&#xA;&#x9;&#x9;Date date = Date.parse(&quot;yyyy-MM-dd&quot;,readValue.workPlaces[i].incomes[0].income.date);  &#x9;//Date of payment&#xD;&#xA;&#x9;&#x9;String regDate = date.format(&quot;yyyy-MM-dd&quot;);&#xD;&#xA;&#x9;&#x9;Map&lt;Object, Object> byNit = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;Map&lt;Object, Object> payment = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;Map&lt;Object, Object> pay = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;paymentNit = readValue.workPlaces[i].taxpayer.documentNumber;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//NIT of the payment&#xD;&#xA;&#x9;&#x9;value = readValue.workPlaces[i].incomes[0].income.value;&#x9;   &#x9;&#x9;&#x9;        &#x9;&#x9;//Value of the payment&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;if(firstDay.getTime() &lt;= date.getTime()){&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Is the payment date in the 6 month range?&#xD;&#xA;&#x9;&#x9;&#x9;if(!outPayload.get(paymentNit)){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;byNit.nit = readValue.workPlaces[i].taxpayer.documentNumber;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;byNit.name = readValue.workPlaces[i].name;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;byNit.economicActivity = readValue.workPlaces[i].economicActivity.id;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;byNit.employmentSituation = tipoCotizante(readValue.workPlaces[i].employmentSituation.name.toUpperCase(),p);&#xD;&#xA;&#x9;&#x9;&#x9;}else{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;byNit = outPayload.get(paymentNit);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pay = outPayload.get(paymentNit).payments;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;if(!pay.get(regDate)){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;payment.date = regDate;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;payment.value = value;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;payment.novelty = readValue.workPlaces[i].novelty.retirement;&#xD;&#xA;&#x9;&#x9;&#x9;}else{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;payment.date = regDate;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;payment.value = pay.get(regDate).value + value;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(pay.get(regDate).novelty.equals(&quot;RETIRO&quot;) || readValue.workPlaces[i].novelty.retirement.toUpperCase().equals(&quot;RETIRO&quot;)){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;payment.novelty = &quot;RETIRO&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}else{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;payment.novelty = &quot;&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;pay.put(regDate,payment);&#xD;&#xA;&#x9;&#x9;&#x9;byNit.payments = pay;&#xD;&#xA;&#x9;&#x9;&#x9;outPayload.put(paymentNit,byNit);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;//Payments from map to list&#xD;&#xA;&#x9;String[] keys = outPayload.keySet().toArray();&#xD;&#xA;&#x9;String cDate = currentYear + &quot;-&quot; + currentMonth + &quot;-&quot; + &quot;01&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;for(int i = 0; i &lt; outPayload.size(); i++){&#xD;&#xA;&#x9;&#x9;Map&lt;Object, Object> pays = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;List&lt;Object> payList = new ArrayList&lt;Object>();&#xD;&#xA;&#x9;&#x9;pays = outPayload.get(keys[i]).payments;&#xD;&#xA;&#x9;&#x9;String[] keys2 = pays.keySet().toArray();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;for(int j = 0; j &lt; pays.size();j++){&#xD;&#xA;&#x9;&#x9;&#x9;if(!keys2[j].equals(cDate)){&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Exclude values from the current month&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;payList.add(pays.get(keys2[j]));&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;pays = outPayload.get(keys[i]);&#xD;&#xA;&#x9;&#x9;pays.payments = payList;&#xD;&#xA;&#x9;&#x9;outPayload.put(keys[i],pays);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;String outPayloadStr = new ObjectMapper().writeValueAsString(outPayload);&#xD;&#xA;&#xD;&#xA;//Setting SOI-ACH service&#xD;&#xA;validacionIngresos.getExecutions()[0].setOutputPayload(outPayloadStr);&#xD;&#xA;&#xD;&#xA;return validacionIngresos;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.lang.Object" returnTypeFixed="true">
                  <referencedElements xmi:type="parameter:Parameter" xmi:id="_jnSduZUREeimyMrxtKzKVw" name="pTipoCotizante" typeClassname="java.lang.String"/>
                  <referencedElements xmi:type="process:JavaObjectData" xmi:id="_C4Rh8Z_MEeiV_aNwidcLeQ" name="grantingTicketDTO" dataType="_WFKfMo6OEei8kvcpw0fSig" className="com.bbva.cnmc.proxyaso.dto.aso.GrantingTicketDTO"/>
                  <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4Rh8p_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
                </expression>
              </parameters>
            </configuration>
            <outputs xmi:type="expression:Operation" xmi:id="_jnSdupUREeimyMrxtKzKVw">
              <leftOperand xmi:type="expression:Expression" xmi:id="_jnSdu5UREeimyMrxtKzKVw" name="validacionIngresos" content="validacionIngresos" type="TYPE_VARIABLE" returnType="com.bbva.model.AutomaticProcessTask">
                <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4RiJp_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
              </leftOperand>
              <rightOperand xmi:type="expression:Expression" xmi:id="_jnSdvZUREeimyMrxtKzKVw" name="result" content="result" type="CONNECTOR_OUTPUT_TYPE" returnType="java.lang.Object">
                <referencedElements xmi:type="definition:Output" xmi:id="_jnSdvpUREeimyMrxtKzKVw" name="result" type="java.lang.Object"/>
              </rightOperand>
              <operator xmi:type="expression:Operator" xmi:id="_jnSdv5UREeimyMrxtKzKVw" type="ASSIGNMENT"/>
            </outputs>
          </connectors>
          <connectors xmi:type="process:Connector" xmi:id="_EPQE0JUGEeimyMrxtKzKVw" name="calculateIncome()" definitionId="scripting-groovy-script" event="ON_ENTER" definitionVersion="1.0.1">
            <configuration xmi:type="connectorconfiguration:ConnectorConfiguration" xmi:id="_EPQE0ZUGEeimyMrxtKzKVw" definitionId="scripting-groovy-script" version="1.0.1" modelVersion="7.4.0-004">
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_EPQE0pUGEeimyMrxtKzKVw" key="script">
                <expression xmi:type="expression:Expression" xmi:id="_EPQE05UGEeimyMrxtKzKVw" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnTypeFixed="true"/>
              </parameters>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_EPQE1JUGEeimyMrxtKzKVw" key="variables"/>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_EPQE1ZUGEeimyMrxtKzKVw" key="fakeScriptExpression">
                <expression xmi:type="expression:Expression" xmi:id="_EPQE1pUGEeimyMrxtKzKVw" name="calculateIncome()" content="import com.bbva.cnmc.proxyaso.controller.ProxyASOController;&#xD;&#xA;import com.bbva.cnmc.proxyaso.dto.aso.AsoDTO;&#xD;&#xA;import com.bbva.cnmc.proxyaso.dto.aso.GrantingTicketDTO;&#xD;&#xA;import com.fasterxml.jackson.databind.ObjectMapper&#xD;&#xA;import com.fasterxml.jackson.databind.DeserializationFeature;&#xD;&#xA;import java.util.logging.Level;&#xD;&#xA;import java.util.logging.Logger;&#xD;&#xA;import javax.print.attribute.standard.MediaName;&#xD;&#xA;import org.apache.commons.lang.StringUtils;&#xD;&#xA;import org.springframework.context.ApplicationContext;&#xD;&#xA;import org.springframework.context.support.ClassPathXmlApplicationContext;&#xD;&#xA;import org.springframework.http.HttpEntity;&#xD;&#xA;import org.springframework.http.HttpHeaders;&#xD;&#xA;import org.springframework.http.HttpMethod;&#xD;&#xA;import org.springframework.http.MediaType;&#xD;&#xA;import org.springframework.http.ResponseEntity;&#xD;&#xA;import org.springframework.web.client.RestTemplate;&#xD;&#xA;&#xD;&#xA;//Logger and mapper configuration&#xD;&#xA;Logger LOGGER = Logger.getLogger(&quot;InfoLogging&quot;);&#xD;&#xA;LOGGER.info(&quot;Logging an INFO-level message: Organize payments by month&quot;);&#xD;&#xA;ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#xD;&#xA;ObjectMapper mapper = new ObjectMapper();&#xD;&#xA;mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);&#xD;&#xA;&#xD;&#xA;//Obtaining inputPayload from execution0 output&#xD;&#xA;String inputPayload = validacionIngresos.getExecutions()[0].getOutputPayload();&#xD;&#xA;Map readValue = mapper.readValue(inputPayload, Map.class);&#xD;&#xA;&#xD;&#xA;//Creating output payload&#xD;&#xA;Map&lt;Object, Object> outPayload = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#xD;&#xA;//Section 5: Calculate income&#xD;&#xA;if(readValue){&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;String[] keys = readValue.keySet().toArray();&#xD;&#xA;&#x9;double income = 0.0;&#xD;&#xA;&#x9;for(int i = 0; i &lt; readValue.size(); i++){&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;List&lt;Object> payments = new ArrayList&lt;Object>();&#xD;&#xA;&#x9;&#x9;payments = readValue.get(keys[i]).payments;&#xD;&#xA;&#x9;&#x9;int[] allPayments = new int[payments.size()];&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;for(int j = 0; j &lt; payments.size(); j++){&#xD;&#xA;&#x9;&#x9;&#x9;allPayments[j] = payments[j].value;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;Arrays.sort(allPayments);&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;if(allPayments.size() > 2){&#xD;&#xA;&#x9;&#x9;&#x9;int index = 0;&#xD;&#xA;&#x9;&#x9;&#x9;if((allPayments.size() % 2) == 1){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;index = (allPayments.size() - 1) / 2;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;income = allPayments[index];&#xD;&#xA;&#x9;&#x9;&#x9;}else{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;index = allPayments.size() / 2;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;income = (allPayments[index] + allPayments[index - 1])/2;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}else if(allPayments.size() == 2){&#xD;&#xA;&#x9;&#x9;&#x9;income = allPayments[0];&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;Map&lt;Object, Object> out = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;out = readValue.get(keys[i]);&#xD;&#xA;&#x9;&#x9;out.income = income;&#xD;&#xA;&#x9;&#x9;outPayload.put(keys[i],out);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;String outPayloadStr = new ObjectMapper().writeValueAsString(outPayload);&#xD;&#xA;&#xD;&#xA;//Setting SOI-ACH service&#xD;&#xA;validacionIngresos.getExecutions()[0].setOutputPayload(outPayloadStr);&#xD;&#xA;&#xD;&#xA;return validacionIngresos;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.lang.Object" returnTypeFixed="true">
                  <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4Rh9Z_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
                </expression>
              </parameters>
            </configuration>
            <outputs xmi:type="expression:Operation" xmi:id="_EPQE2JUGEeimyMrxtKzKVw">
              <leftOperand xmi:type="expression:Expression" xmi:id="_EPQE2ZUGEeimyMrxtKzKVw" name="validacionIngresos" content="validacionIngresos" type="TYPE_VARIABLE" returnType="com.bbva.model.AutomaticProcessTask">
                <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4RiK5_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
              </leftOperand>
              <rightOperand xmi:type="expression:Expression" xmi:id="_EPQE25UGEeimyMrxtKzKVw" name="result" content="result" type="CONNECTOR_OUTPUT_TYPE" returnType="java.lang.Object">
                <referencedElements xmi:type="definition:Output" xmi:id="_EPQE3JUGEeimyMrxtKzKVw" name="result" type="java.lang.Object"/>
              </rightOperand>
              <operator xmi:type="expression:Operator" xmi:id="_EPQE3ZUGEeimyMrxtKzKVw" type="ASSIGNMENT"/>
            </outputs>
          </connectors>
          <connectors xmi:type="process:Connector" xmi:id="_C-A4sJUBEeimyMrxtKzKVw" name="past60days()" definitionId="scripting-groovy-script" event="ON_ENTER" definitionVersion="1.0.1">
            <configuration xmi:type="connectorconfiguration:ConnectorConfiguration" xmi:id="_C-A4sZUBEeimyMrxtKzKVw" definitionId="scripting-groovy-script" version="1.0.1" modelVersion="7.4.0-004">
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_C-A4spUBEeimyMrxtKzKVw" key="script">
                <expression xmi:type="expression:Expression" xmi:id="_C-A4s5UBEeimyMrxtKzKVw" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnTypeFixed="true"/>
              </parameters>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_C-A4tJUBEeimyMrxtKzKVw" key="variables"/>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_C-A4tZUBEeimyMrxtKzKVw" key="fakeScriptExpression">
                <expression xmi:type="expression:Expression" xmi:id="_C-A4tpUBEeimyMrxtKzKVw" name="past60days()" content="import com.bbva.cnmc.proxyaso.controller.ProxyASOController;&#xD;&#xA;import com.bbva.cnmc.proxyaso.dto.aso.AsoDTO;&#xD;&#xA;import com.bbva.cnmc.proxyaso.dto.aso.GrantingTicketDTO;&#xD;&#xA;import com.fasterxml.jackson.databind.ObjectMapper&#xD;&#xA;import com.fasterxml.jackson.databind.DeserializationFeature;&#xD;&#xA;import java.util.logging.Level;&#xD;&#xA;import java.util.logging.Logger;&#xD;&#xA;import javax.print.attribute.standard.MediaName;&#xD;&#xA;import org.apache.commons.lang.StringUtils;&#xD;&#xA;import org.springframework.context.ApplicationContext;&#xD;&#xA;import org.springframework.context.support.ClassPathXmlApplicationContext;&#xD;&#xA;import org.springframework.http.HttpEntity;&#xD;&#xA;import org.springframework.http.HttpHeaders;&#xD;&#xA;import org.springframework.http.HttpMethod;&#xD;&#xA;import org.springframework.http.MediaType;&#xD;&#xA;import org.springframework.http.ResponseEntity;&#xD;&#xA;import org.springframework.web.client.RestTemplate;&#xD;&#xA;&#xD;&#xA;//Logger and mapper configuration&#xD;&#xA;Logger LOGGER = Logger.getLogger(&quot;InfoLogging&quot;);&#xD;&#xA;LOGGER.info(&quot;Logging an INFO-level message: Filter NITs without at least one payment in the last 60 days&quot;);&#xD;&#xA;ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#xD;&#xA;ObjectMapper mapper = new ObjectMapper();&#xD;&#xA;mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);&#xD;&#xA;&#xD;&#xA;//Obtaining inputPayload from execution0 output&#xD;&#xA;String inputPayload = validacionIngresos.getExecutions()[0].getOutputPayload();&#xD;&#xA;Map readValue = mapper.readValue(inputPayload, Map.class);&#xD;&#xA;&#xD;&#xA;//Creating output payload&#xD;&#xA;Map&lt;Object, Object> outPayload = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#xD;&#xA;//Section 2: Selection of NITs by date (at least one payment has to be on the 60 days range)&#xD;&#xA;if(readValue){&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;//Date treatments&#xD;&#xA;&#x9;Date todayDate = Date.parse(&quot;yyyy-MM-dd&quot;,new Date().format(&quot;yyyy-MM-dd&quot;));&#x9;// Date today&#xD;&#xA;&#x9;String todayDateStr = todayDate.format(&quot;yyyy-MM-dd&quot;);&#xD;&#xA;&#x9;long daysBack = todayDate.getTime() - 5184000000;     &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Miliseconds on 60 days before today&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;boolean isActual;&#xD;&#xA;&#x9;String[] keys = readValue.keySet().toArray();&#xD;&#xA;&#x9;List&lt;Object> payments = new ArrayList&lt;Object>();&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;for(int i = 0; i &lt; readValue.size(); i++){&#xD;&#xA;&#x9;&#x9;isActual = false;&#xD;&#xA;&#x9;&#x9;payments = readValue.get(keys[i]).payments;&#xD;&#xA;&#x9;   &#xD;&#xA;&#x9;&#x9;for(int j = 0; j &lt; payments.size(); j++){&#xD;&#xA;&#x9;&#x9;&#x9;Date date0 = Date.parse(&quot;yyyy-MM-dd&quot;,payments[j].date);     &#x9;// Date of the payment&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;if(date0.getTime() >= daysBack){&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;     &#x9;// Is the date of payment on the 60 days range??&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;isActual = true;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;Map&lt;Object, Object> out = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;out = readValue.get(keys[i]);&#xD;&#xA;&#x9;&#x9;out.isActual = isActual;&#xD;&#xA;&#x9;&#x9;outPayload.put(keys[i],out);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;String outPayloadStr = new ObjectMapper().writeValueAsString(outPayload);&#xD;&#xA;&#xD;&#xA;//Setting SOI-ACH service&#xD;&#xA;validacionIngresos.getExecutions()[0].setOutputPayload(outPayloadStr);&#xD;&#xA;&#xD;&#xA;return validacionIngresos;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.lang.Object" returnTypeFixed="true">
                  <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4Rh-J_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
                </expression>
              </parameters>
            </configuration>
            <outputs xmi:type="expression:Operation" xmi:id="_C-A4uJUBEeimyMrxtKzKVw">
              <leftOperand xmi:type="expression:Expression" xmi:id="_C-A4uZUBEeimyMrxtKzKVw" name="validacionIngresos" content="validacionIngresos" type="TYPE_VARIABLE" returnType="com.bbva.model.AutomaticProcessTask">
                <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4SIoZ_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
              </leftOperand>
              <rightOperand xmi:type="expression:Expression" xmi:id="_C-A4u5UBEeimyMrxtKzKVw" name="result" content="result" type="CONNECTOR_OUTPUT_TYPE" returnType="java.lang.Object">
                <referencedElements xmi:type="definition:Output" xmi:id="_C-A4vJUBEeimyMrxtKzKVw" name="result" type="java.lang.Object"/>
              </rightOperand>
              <operator xmi:type="expression:Operator" xmi:id="_C-A4vZUBEeimyMrxtKzKVw" type="ASSIGNMENT"/>
            </outputs>
          </connectors>
          <connectors xmi:type="process:Connector" xmi:id="_uD72AJUBEeimyMrxtKzKVw" name="discontinuity90days()" definitionId="scripting-groovy-script" event="ON_ENTER" definitionVersion="1.0.1">
            <configuration xmi:type="connectorconfiguration:ConnectorConfiguration" xmi:id="_uD72AZUBEeimyMrxtKzKVw" definitionId="scripting-groovy-script" version="1.0.1" modelVersion="7.4.0-004">
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_uD72ApUBEeimyMrxtKzKVw" key="script">
                <expression xmi:type="expression:Expression" xmi:id="_uD72A5UBEeimyMrxtKzKVw" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnTypeFixed="true"/>
              </parameters>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_uD72BJUBEeimyMrxtKzKVw" key="variables"/>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_uD72BZUBEeimyMrxtKzKVw" key="fakeScriptExpression">
                <expression xmi:type="expression:Expression" xmi:id="_uD72BpUBEeimyMrxtKzKVw" name="discontinuity90days()" content="import com.bbva.cnmc.proxyaso.controller.ProxyASOController;&#xD;&#xA;import com.bbva.cnmc.proxyaso.dto.aso.AsoDTO;&#xD;&#xA;import com.bbva.cnmc.proxyaso.dto.aso.GrantingTicketDTO;&#xD;&#xA;import com.fasterxml.jackson.databind.ObjectMapper&#xD;&#xA;import com.fasterxml.jackson.databind.DeserializationFeature;&#xD;&#xA;import java.util.logging.Level;&#xD;&#xA;import java.util.logging.Logger;&#xD;&#xA;import javax.print.attribute.standard.MediaName;&#xD;&#xA;import org.apache.commons.lang.StringUtils;&#xD;&#xA;import org.springframework.context.ApplicationContext;&#xD;&#xA;import org.springframework.context.support.ClassPathXmlApplicationContext;&#xD;&#xA;import org.springframework.http.HttpEntity;&#xD;&#xA;import org.springframework.http.HttpHeaders;&#xD;&#xA;import org.springframework.http.HttpMethod;&#xD;&#xA;import org.springframework.http.MediaType;&#xD;&#xA;import org.springframework.http.ResponseEntity;&#xD;&#xA;import org.springframework.web.client.RestTemplate;&#xD;&#xA;&#xD;&#xA;//Logger and mapper configuration&#xD;&#xA;Logger LOGGER = Logger.getLogger(&quot;InfoLogging&quot;);&#xD;&#xA;LOGGER.info(&quot;Logging an INFO-level message: Filter NITs with discontinuities greater than 90 days&quot;);&#xD;&#xA;ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#xD;&#xA;ObjectMapper mapper = new ObjectMapper();&#xD;&#xA;mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);&#xD;&#xA;&#xD;&#xA;//Obtaining inputPayload from execution0 output&#xD;&#xA;String inputPayload = validacionIngresos.getExecutions()[0].getOutputPayload();&#xD;&#xA;Map readValue = mapper.readValue(inputPayload, Map.class);&#xD;&#xA;&#xD;&#xA;//Creating output payload&#xD;&#xA;Map&lt;Object, Object> outPayload = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#xD;&#xA;//Section 3: Selection of NITs by date (time between payments can´t be greater than 90 days)&#xD;&#xA;if(readValue){&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;boolean isContinuous;&#xD;&#xA;&#x9;String[] keys = readValue.keySet().toArray();&#xD;&#xA;&#x9;List&lt;Object> payments = new ArrayList&lt;Object>();&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;for(int i = 0; i &lt; readValue.size(); i++){&#xD;&#xA;&#x9;&#x9;isContinuous = true;&#xD;&#xA;&#x9;&#x9;payments = readValue.get(keys[i]).payments;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;if(payments.size() > 1){&#xD;&#xA;&#x9;&#x9;&#x9;for(int j = 0; j &lt; payments.size()-1; j++){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Date date1 = Date.parse(&quot;yyyy-MM-dd&quot;,payments[j].date);     &#x9;// Date of the payment&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Date date2 = Date.parse(&quot;yyyy-MM-dd&quot;,payments[j+1].date);     &#x9;// Date of the previous payment&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;long diff = date1.getTime() - date2.getTime();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(diff > 7776000000){&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;     &#x9;&#x9;&#x9;&#x9;// Is the difference between dates on the 90 days range??&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;isContinuous = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;Map&lt;Object, Object> out = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;out = readValue.get(keys[i]);&#xD;&#xA;&#x9;&#x9;out.isContinuous = isContinuous;&#xD;&#xA;&#x9;&#x9;outPayload.put(keys[i],out);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;String outPayloadStr = new ObjectMapper().writeValueAsString(outPayload);&#xD;&#xA;LOGGER.info(&quot;output Prueba: &quot; + outPayloadStr);&#xD;&#xA;//Setting SOI-ACH service&#xD;&#xA;validacionIngresos.getExecutions()[0].setOutputPayload(outPayloadStr);&#xD;&#xA;&#xD;&#xA;return validacionIngresos;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.lang.Object" returnTypeFixed="true">
                  <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4Rh-5_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
                </expression>
              </parameters>
            </configuration>
            <outputs xmi:type="expression:Operation" xmi:id="_uD72CJUBEeimyMrxtKzKVw">
              <leftOperand xmi:type="expression:Expression" xmi:id="_uD72CZUBEeimyMrxtKzKVw" name="validacionIngresos" content="validacionIngresos" type="TYPE_VARIABLE" returnType="com.bbva.model.AutomaticProcessTask">
                <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4SIpp_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
              </leftOperand>
              <rightOperand xmi:type="expression:Expression" xmi:id="_uD72C5UBEeimyMrxtKzKVw" name="result" content="result" type="CONNECTOR_OUTPUT_TYPE" returnType="java.lang.Object">
                <referencedElements xmi:type="definition:Output" xmi:id="_uD72DJUBEeimyMrxtKzKVw" name="result" type="java.lang.Object"/>
              </rightOperand>
              <operator xmi:type="expression:Operator" xmi:id="_uD72DZUBEeimyMrxtKzKVw" type="ASSIGNMENT"/>
            </outputs>
          </connectors>
          <connectors xmi:type="process:Connector" xmi:id="_EHJxYJUJEeimyMrxtKzKVw" name="organizeByMonth()" definitionId="scripting-groovy-script" event="ON_ENTER" definitionVersion="1.0.1">
            <configuration xmi:type="connectorconfiguration:ConnectorConfiguration" xmi:id="_EHJxYZUJEeimyMrxtKzKVw" definitionId="scripting-groovy-script" version="1.0.1" modelVersion="7.4.0-004">
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_EHJxYpUJEeimyMrxtKzKVw" key="script">
                <expression xmi:type="expression:Expression" xmi:id="_EHJxY5UJEeimyMrxtKzKVw" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnTypeFixed="true"/>
              </parameters>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_EHJxZJUJEeimyMrxtKzKVw" key="variables"/>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_EHJxZZUJEeimyMrxtKzKVw" key="fakeScriptExpression">
                <expression xmi:type="expression:Expression" xmi:id="_EHJxZpUJEeimyMrxtKzKVw" name="organizeByMonth()" content="import com.bbva.cnmc.proxyaso.controller.ProxyASOController;&#xD;&#xA;import com.bbva.cnmc.proxyaso.dto.aso.AsoDTO;&#xD;&#xA;import com.bbva.cnmc.proxyaso.dto.aso.GrantingTicketDTO;&#xD;&#xA;import com.fasterxml.jackson.databind.ObjectMapper&#xD;&#xA;import com.fasterxml.jackson.databind.DeserializationFeature;&#xD;&#xA;import java.util.logging.Level;&#xD;&#xA;import java.util.logging.Logger;&#xD;&#xA;import javax.print.attribute.standard.MediaName;&#xD;&#xA;import org.apache.commons.lang.StringUtils;&#xD;&#xA;import org.springframework.context.ApplicationContext;&#xD;&#xA;import org.springframework.context.support.ClassPathXmlApplicationContext;&#xD;&#xA;import org.springframework.http.HttpEntity;&#xD;&#xA;import org.springframework.http.HttpHeaders;&#xD;&#xA;import org.springframework.http.HttpMethod;&#xD;&#xA;import org.springframework.http.MediaType;&#xD;&#xA;import org.springframework.http.ResponseEntity;&#xD;&#xA;import org.springframework.web.client.RestTemplate;&#xD;&#xA;&#xD;&#xA;//Function for translate month from number to name of the month&#xD;&#xA;public String monthToLetter(int monthInt){&#xD;&#xA;&#x9;String monthStr;&#xD;&#xA;&#x9;if(monthInt == 1){monthStr = &quot;Enero&quot;;}&#xD;&#xA;&#x9;if(monthInt == 2){monthStr = &quot;Febrero&quot;;}&#xD;&#xA;&#x9;if(monthInt == 3){monthStr = &quot;Marzo&quot;;}&#xD;&#xA;&#x9;if(monthInt == 4){monthStr = &quot;Abril&quot;;}&#xD;&#xA;&#x9;if(monthInt == 5){monthStr = &quot;Mayo&quot;;}&#xD;&#xA;&#x9;if(monthInt == 6){monthStr = &quot;Junio&quot;;}&#xD;&#xA;&#x9;if(monthInt == 7){monthStr = &quot;Julio&quot;;}&#xD;&#xA;&#x9;if(monthInt == 8){monthStr = &quot;Agosto&quot;;}&#xD;&#xA;&#x9;if(monthInt == 9){monthStr = &quot;Septiembre&quot;;}&#xD;&#xA;&#x9;if(monthInt == 10){monthStr = &quot;Octubre&quot;;}&#xD;&#xA;&#x9;if(monthInt == 11){monthStr = &quot;Noviembre&quot;;}&#xD;&#xA;&#x9;if(monthInt == 12){monthStr = &quot;Diciembre&quot;;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;return monthStr;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//Logger and mapper configuration&#xD;&#xA;Logger LOGGER = Logger.getLogger(&quot;InfoLogging&quot;);&#xD;&#xA;LOGGER.info(&quot;Logging an INFO-level message: Organize payments by month&quot;);&#xD;&#xA;ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#xD;&#xA;ObjectMapper mapper = new ObjectMapper();&#xD;&#xA;mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);&#xD;&#xA;&#xD;&#xA;//Obtaining inputPayload from execution0 output&#xD;&#xA;String inputPayload = validacionIngresos.getExecutions()[0].getOutputPayload();&#xD;&#xA;Map readValue = mapper.readValue(inputPayload, Map.class);&#xD;&#xA;&#xD;&#xA;//Creating output payload&#xD;&#xA;Map&lt;Object, Object> outPayload = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#xD;&#xA;//Section 4: Order the resulting payments by month&#xD;&#xA;if(readValue){&#xD;&#xA;&#x9;Map&lt;Object, Object> out = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;List&lt;Object> infoByNit = new ArrayList&lt;Object>();&#xD;&#xA;&#x9;List&lt;Object> payments = new ArrayList&lt;Object>();&#xD;&#xA;&#x9;String[] keys = readValue.keySet().toArray();&#xD;&#xA;&#x9;double value = 0.0;&#xD;&#xA;&#x9;String novelty;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;for(int i = 0; i &lt; readValue.size(); i++){&#xD;&#xA;&#x9;&#x9;payments = readValue.get(keys[i]).payments;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;Map&lt;Object, Object> info = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;info.nit = readValue.get(keys[i]).nit;&#xD;&#xA;&#x9;&#x9;info.name = readValue.get(keys[i]).name;&#xD;&#xA;&#x9;&#x9;info.economicActivity = readValue.get(keys[i]).economicActivity;&#xD;&#xA;&#x9;&#x9;info.employmentSituation = readValue.get(keys[i]).employmentSituation;&#xD;&#xA;&#x9;&#x9;info.income = readValue.get(keys[i]).income;&#xD;&#xA;&#x9;&#x9;info.isActual = readValue.get(keys[i]).isActual;&#xD;&#xA;&#x9;&#x9;info.isContinuous = readValue.get(keys[i]).isContinuous;&#xD;&#xA;&#x9;&#x9;infoByNit.add(info);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;for(int j = 0; j &lt; payments.size(); j++){&#xD;&#xA;&#x9;&#x9;&#x9;Date date = Date.parse(&quot;yyyy-MM-dd&quot;,payments[j].date);     &#x9;// Date of the payment&#xD;&#xA;&#x9;&#x9;&#x9;String regDate = date.format(&quot;yyyy-MM-dd&quot;);&#xD;&#xA;&#x9;&#x9;&#x9;Map&lt;Object, Object> pay = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;&#x9;Map&lt;Object, Object> payInfo = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;&#x9;Map&lt;Object, Object> byMonth = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;&#x9;int month = Integer.parseInt(regDate.split(&quot;-&quot;)[1]);&#xD;&#xA;&#x9;&#x9;&#x9;int year = Integer.parseInt(regDate.split(&quot;-&quot;)[0]);&#xD;&#xA;&#x9;&#x9;&#x9;value = payments[j].value;&#xD;&#xA;&#x9;&#x9;&#x9;novelty = payments[j].novelty;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;if(!out.get(month)){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;byMonth.year = year;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;byMonth.sumValue = value;&#xD;&#xA;&#x9;&#x9;&#x9;}else{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;byMonth.year = year;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;byMonth.sumValue = out.get(month).sumValue + value;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pay = out.get(month).payments;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(pay.get(keys[i])){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;value = value + pay.get(keys[i]).value;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;payInfo.value = value;&#xD;&#xA;&#x9;&#x9;&#x9;payInfo.novelty = novelty;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;//pay.put(keys[i],value);&#xD;&#xA;&#x9;&#x9;&#x9;pay.put(keys[i],payInfo);&#xD;&#xA;&#x9;&#x9;&#x9;byMonth.payments = pay;&#xD;&#xA;&#x9;&#x9;&#x9;out.put(month,byMonth);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;List&lt;Object> outList = new ArrayList&lt;Object>();&#xD;&#xA;&#x9;int[] keysOut = out.keySet().toArray();&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;for(int i = 0; i &lt; out.size(); i++){&#xD;&#xA;&#x9;&#x9;Map&lt;Object, Object> out2 = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;out2.month = monthToLetter(keysOut[i]);&#xD;&#xA;&#x9;&#x9;out2.number = keysOut[i];&#xD;&#xA;&#x9;&#x9;out2.putAll(out.get(keysOut[i]));&#xD;&#xA;&#x9;&#x9;outList.add(out2);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;outPayload.infoNits = infoByNit;&#xD;&#xA;&#x9;outPayload.byMonth = outList;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;String outPayloadStr = new ObjectMapper().writeValueAsString(outPayload);&#xD;&#xA;&#xD;&#xA;//Setting SOI-ACH service&#xD;&#xA;validacionIngresos.getExecutions()[0].setOutputPayload(outPayloadStr);&#xD;&#xA;validacionIngresos.getExecutions()[0].setDateEnd(new Date().getTime());&#xD;&#xA;validacionIngresos.getExecutions()[0].setStatus(&quot;FINISHED&quot;);&#xD;&#xA;&#xD;&#xA;return validacionIngresos;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.lang.Object" returnTypeFixed="true">
                  <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4Rh_p_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
                </expression>
              </parameters>
            </configuration>
            <outputs xmi:type="expression:Operation" xmi:id="_EHJxaJUJEeimyMrxtKzKVw">
              <leftOperand xmi:type="expression:Expression" xmi:id="_EHJxaZUJEeimyMrxtKzKVw" name="validacionIngresos" content="validacionIngresos" type="TYPE_VARIABLE" returnType="com.bbva.model.AutomaticProcessTask">
                <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4SIq5_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
              </leftOperand>
              <rightOperand xmi:type="expression:Expression" xmi:id="_EHJxa5UJEeimyMrxtKzKVw" name="result" content="result" type="CONNECTOR_OUTPUT_TYPE" returnType="java.lang.Object">
                <referencedElements xmi:type="definition:Output" xmi:id="_EHKYcJUJEeimyMrxtKzKVw" name="result" type="java.lang.Object"/>
              </rightOperand>
              <operator xmi:type="expression:Operator" xmi:id="_EHKYcZUJEeimyMrxtKzKVw" type="ASSIGNMENT"/>
            </outputs>
          </connectors>
          <loopCondition xmi:type="expression:Expression" xmi:id="_WFKe_Y6OEei8kvcpw0fSig" name="" content="" returnType="java.lang.Boolean" returnTypeFixed="true"/>
          <loopMaximum xmi:type="expression:Expression" xmi:id="_WFKe_o6OEei8kvcpw0fSig" name="" content="" returnType="java.lang.Integer" returnTypeFixed="true"/>
          <cardinalityExpression xmi:type="expression:Expression" xmi:id="_WFKe_46OEei8kvcpw0fSig" name="" content="" returnType="java.lang.Integer" returnTypeFixed="true"/>
          <iteratorExpression xmi:type="expression:Expression" xmi:id="_WFKfAI6OEei8kvcpw0fSig" name="multiInstanceIterator" content="multiInstanceIterator" type="MULTIINSTANCE_ITERATOR_TYPE" returnType="java.lang.Object" returnTypeFixed="true"/>
          <completionCondition xmi:type="expression:Expression" xmi:id="_WFKfAY6OEei8kvcpw0fSig" name="" content="" returnType="java.lang.Boolean" returnTypeFixed="true"/>
        </elements>
        <elements xmi:type="process:ServiceTask" xmi:id="_i8Mw8JA9EeiFubttvGmCkQ" name="Drools SOI-ACH" outgoing="_dH7JMJTzEeimyMrxtKzKVw" incoming="_hGtO8JA9EeiFubttvGmCkQ">
          <viewPageFlowRedirectionURL xmi:type="expression:Expression" xmi:id="_gbjZI5A9EeiFubttvGmCkQ" name="" content="" returnTypeFixed="true"/>
          <dynamicLabel xmi:type="expression:Expression" xmi:id="_gbjZIZA9EeiFubttvGmCkQ" name="" content="" returnTypeFixed="true"/>
          <dynamicDescription xmi:type="expression:Expression" xmi:id="_gbjZIJA9EeiFubttvGmCkQ" name="" content="" returnTypeFixed="true"/>
          <stepSummary xmi:type="expression:Expression" xmi:id="_gbjZIpA9EeiFubttvGmCkQ" name="" content="" returnTypeFixed="true"/>
          <connectors xmi:type="process:Connector" xmi:id="_szGD0JQ-Eeidp_SnWw0LXw" name="endRules()" definitionId="scripting-groovy-script" event="ON_FINISH" definitionVersion="1.0.1">
            <configuration xmi:type="connectorconfiguration:ConnectorConfiguration" xmi:id="_szGD0ZQ-Eeidp_SnWw0LXw" definitionId="scripting-groovy-script" version="1.0.1" modelVersion="7.4.0-004">
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_szGD0pQ-Eeidp_SnWw0LXw" key="script">
                <expression xmi:type="expression:Expression" xmi:id="_szGD05Q-Eeidp_SnWw0LXw" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnTypeFixed="true"/>
              </parameters>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_szGD1JQ-Eeidp_SnWw0LXw" key="variables"/>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_szGD1ZQ-Eeidp_SnWw0LXw" key="fakeScriptExpression">
                <expression xmi:type="expression:Expression" xmi:id="_szGD1pQ-Eeidp_SnWw0LXw" name="endRules()" content="import com.bbva.cnmc.proxyaso.controller.ProxyASOController;&#xD;&#xA;import com.bbva.cnmc.proxyaso.dto.aso.AsoDTO;&#xD;&#xA;import com.bbva.cnmc.proxyaso.dto.aso.GrantingTicketDTO;&#xD;&#xA;import com.fasterxml.jackson.databind.ObjectMapper&#xD;&#xA;import com.fasterxml.jackson.databind.DeserializationFeature;&#xD;&#xA;import java.util.logging.Level;&#xD;&#xA;import java.util.logging.Logger;&#xD;&#xA;import javax.print.attribute.standard.MediaName;&#xD;&#xA;import org.apache.commons.lang.StringUtils;&#xD;&#xA;import org.springframework.context.ApplicationContext;&#xD;&#xA;import org.springframework.context.support.ClassPathXmlApplicationContext;&#xD;&#xA;import org.springframework.http.HttpEntity;&#xD;&#xA;import org.springframework.http.HttpHeaders;&#xD;&#xA;import org.springframework.http.HttpMethod;&#xD;&#xA;import org.springframework.http.MediaType;&#xD;&#xA;import org.springframework.http.ResponseEntity;&#xD;&#xA;import org.springframework.web.client.RestTemplate;&#xD;&#xA; &#xD;&#xA;//Logger and mapper configuration&#xD;&#xA;Logger LOGGER = Logger.getLogger(&quot;InfoLogging&quot;);&#xD;&#xA;LOGGER.info(&quot;Logging an INFO-level message: Finishing AutomaticProccessTask&quot;);&#xD;&#xA;ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#xD;&#xA;ObjectMapper mapper = new ObjectMapper();&#xD;&#xA;mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);&#xD;&#xA;&#xD;&#xA;//Configuration of output payload&#xD;&#xA;//Map&lt;Object, Object> outPayload = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;//String outPayloadStr = new ObjectMapper().writeValueAsString(outPayload);&#xD;&#xA;&#xD;&#xA;//Setting Drools subprocess&#xD;&#xA;//validacionIngresos.getExecutions()[1].setOutputPayload(outPayloadStr);&#xD;&#xA;validacionIngresos.getExecutions()[1].setDateEnd(new Date().getTime());&#xD;&#xA;validacionIngresos.getExecutions()[1].setStatus(&quot;FINISHED&quot;);&#xD;&#xA; &#xD;&#xA;//Setting automaticProccessTask&#xD;&#xA;validacionIngresos.setStatus(&quot;FINISHED&quot;);&#xD;&#xA;validacionIngresos.setEndDate(new Date().getTime());&#xD;&#xA; &#xD;&#xA;return validacionIngresos;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.lang.Object" returnTypeFixed="true">
                  <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4RiAZ_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
                </expression>
              </parameters>
            </configuration>
            <outputs xmi:type="expression:Operation" xmi:id="_szGD2JQ-Eeidp_SnWw0LXw">
              <leftOperand xmi:type="expression:Expression" xmi:id="_szGD2ZQ-Eeidp_SnWw0LXw" name="validacionIngresos" content="validacionIngresos" type="TYPE_VARIABLE" returnType="com.bbva.model.AutomaticProcessTask">
                <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4SIsJ_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
              </leftOperand>
              <rightOperand xmi:type="expression:Expression" xmi:id="_szGD25Q-Eeidp_SnWw0LXw" name="result" content="result" type="CONNECTOR_OUTPUT_TYPE" returnType="java.lang.Object">
                <referencedElements xmi:type="definition:Output" xmi:id="_szGD3JQ-Eeidp_SnWw0LXw" name="result" type="java.lang.Object"/>
              </rightOperand>
              <operator xmi:type="expression:Operator" xmi:id="_szGD3ZQ-Eeidp_SnWw0LXw" type="ASSIGNMENT"/>
            </outputs>
          </connectors>
          <connectors xmi:type="process:Connector" xmi:id="_BUBwMJUOEeimyMrxtKzKVw" name="rulesDiscontinuity()" definitionId="scripting-groovy-script" event="ON_ENTER" definitionVersion="1.0.1">
            <configuration xmi:type="connectorconfiguration:ConnectorConfiguration" xmi:id="_BUBwMZUOEeimyMrxtKzKVw" definitionId="scripting-groovy-script" version="1.0.1" modelVersion="7.4.0-004">
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_BUBwMpUOEeimyMrxtKzKVw" key="script">
                <expression xmi:type="expression:Expression" xmi:id="_BUBwM5UOEeimyMrxtKzKVw" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnTypeFixed="true"/>
              </parameters>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_BUBwNJUOEeimyMrxtKzKVw" key="variables"/>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_BUBwNZUOEeimyMrxtKzKVw" key="fakeScriptExpression">
                <expression xmi:type="expression:Expression" xmi:id="_BUBwNpUOEeimyMrxtKzKVw" name="rulesDiscontinuity()" content="import com.fasterxml.jackson.databind.ObjectMapper&#xD;&#xA;import com.fasterxml.jackson.databind.DeserializationFeature;&#xD;&#xA;import java.util.logging.Level;&#xD;&#xA;import java.util.logging.Logger;&#xD;&#xA;import org.apache.commons.lang.StringUtils;&#xD;&#xA;import org.springframework.context.ApplicationContext;&#xD;&#xA;import org.springframework.context.support.ClassPathXmlApplicationContext;&#xD;&#xA;import org.kie.api.KieServices;&#xD;&#xA;import org.kie.api.runtime.KieContainer;&#xD;&#xA;import org.kie.api.runtime.KieSession;&#xD;&#xA;import com.bbva.drools.dto.BaseAchDTO;&#xD;&#xA;import com.bbva.drools.reglas.validacion.dto.reglas.ReglaNegocioDTO;&#xD;&#xA; &#xD;&#xA;//Logger and mapper configuration&#xD;&#xA;Logger LOGGER = Logger.getLogger(&quot;InfoLogging&quot;);&#xD;&#xA;LOGGER.info(&quot;Logging an INFO-level message: Rule for elimination of NITs with discontinuities greater than 90 days&quot;);&#xD;&#xA;ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#xD;&#xA;ObjectMapper mapper = new ObjectMapper();&#xD;&#xA;mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);&#xD;&#xA;&#xD;&#xA;//Function to get rule, response and message for a particular rule&#xD;&#xA;public Map printRule(int numberRule, String nit){&#xD;&#xA;&#x9;Logger LOGGER1 = Logger.getLogger(&quot;Rule:&quot;);&#xD;&#xA;&#x9;try {&#xD;&#xA;&#x9;&#x9;KieServices ks = KieServices.Factory.get();&#xD;&#xA;&#x9;&#x9;KieContainer kContainer = ks.getKieClasspathContainer();&#xD;&#xA;&#x9;&#x9;KieSession kSession = kContainer.newKieSession(&quot;ksession-rules&quot;);&#xD;&#xA;&#x9;&#x9;baseAchDTO.setReglasNegocioDTO([]);&#xD;&#xA;&#x9;&#x9;kSession.insert(baseAchDTO);&#xD;&#xA;&#x9;&#x9;kSession.fireAllRules();&#xD;&#xA;&#x9;&#x9;ReglaNegocioDTO rule = baseAchDTO.getReglasNegocioDTO().get(numberRule);&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;//Map with rule, response and message for rule located in (numberRule)&#xD;&#xA;&#x9;&#x9;Map&lt;Object, Object> response = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;response.nit = nit;&#xD;&#xA;&#x9;&#x9;response.regla = rule.getRespuestaObtenida().getRegla();&#xD;&#xA;&#x9;&#x9;response.respuesta = rule.getRespuestaObtenida().isRespuesta();&#xD;&#xA;&#x9;&#x9;response.mensaje = rule.getRespuestaObtenida().getMensajeRespuesta();&#xD;&#xA;&#x9;&#x9;return response;&#xD;&#xA;&#x9;} catch (Exception e) {&#xD;&#xA;&#x9;&#x9;LOGGER1.info(&quot;Error: &quot; + e.message);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//Obtaining inputPayload from execution0 output (SOI-ACH service)&#xD;&#xA;String inputPayload = validacionIngresos.getExecutions()[0].getOutputPayload();&#xD;&#xA;Map readValue = mapper.readValue(inputPayload, Map.class);&#xD;&#xA;&#xD;&#xA;//Creating list for the output&#xD;&#xA;List&lt;Object> output = new ArrayList&lt;>();&#xD;&#xA;Map&lt;Object, Object> outPayload = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#xD;&#xA;//Execution of rules maxDiasDiscontinuos&#xD;&#xA;if(readValue.infoNits){&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;for(int i = 0; i &lt; readValue.infoNits.size(); i++){&#x9;&#x9;&#x9;&#x9;//Execution of rules 0 and 1 for each NIT&#xD;&#xA;&#x9;&#x9;baseAchDTO.setMaxDiasDiscontinuos(readValue.infoNits[i].isContinuous);&#xD;&#xA;&#x9;&#x9;output.add(printRule(0,readValue.infoNits[i].nit));&#xD;&#xA;&#x9;&#x9;output.add(printRule(1,readValue.infoNits[i].nit));&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//Configuration of output payload for Drools&#xD;&#xA;outPayload.reglas = output;&#xD;&#xA;String outPayloadStr = new ObjectMapper().writeValueAsString(outPayload);&#xD;&#xA;validacionIngresos.getExecutions()[1].setOutputPayload(outPayloadStr);&#xD;&#xA;&#xD;&#xA;return validacionIngresos;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.lang.Object" returnTypeFixed="true">
                  <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4RiBJ_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
                  <referencedElements xmi:type="process:JavaObjectData" xmi:id="_C4RiBZ_MEeiV_aNwidcLeQ" name="baseAchDTO" dataType="_WFKfMo6OEei8kvcpw0fSig" className="com.bbva.drools.dto.BaseAchDTO"/>
                </expression>
              </parameters>
            </configuration>
            <outputs xmi:type="expression:Operation" xmi:id="_BUBwOZUOEeimyMrxtKzKVw">
              <leftOperand xmi:type="expression:Expression" xmi:id="_BUBwOpUOEeimyMrxtKzKVw" name="validacionIngresos" content="validacionIngresos" type="TYPE_VARIABLE" returnType="com.bbva.model.AutomaticProcessTask">
                <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4SItZ_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
              </leftOperand>
              <rightOperand xmi:type="expression:Expression" xmi:id="_BUBwPJUOEeimyMrxtKzKVw" name="result" content="result" type="CONNECTOR_OUTPUT_TYPE" returnType="java.lang.Object">
                <referencedElements xmi:type="definition:Output" xmi:id="_BUBwPZUOEeimyMrxtKzKVw" name="result" type="java.lang.Object"/>
              </rightOperand>
              <operator xmi:type="expression:Operator" xmi:id="_BUBwPpUOEeimyMrxtKzKVw" type="ASSIGNMENT"/>
            </outputs>
          </connectors>
          <connectors xmi:type="process:Connector" xmi:id="_w8c3EJUIEeimyMrxtKzKVw" name="nitElimination1()" definitionId="scripting-groovy-script" event="ON_ENTER" definitionVersion="1.0.1">
            <configuration xmi:type="connectorconfiguration:ConnectorConfiguration" xmi:id="_w8c3EZUIEeimyMrxtKzKVw" definitionId="scripting-groovy-script" version="1.0.1" modelVersion="7.4.0-004">
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_w8c3EpUIEeimyMrxtKzKVw" key="script">
                <expression xmi:type="expression:Expression" xmi:id="_w8c3E5UIEeimyMrxtKzKVw" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnTypeFixed="true"/>
              </parameters>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_w8c3FJUIEeimyMrxtKzKVw" key="variables"/>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_w8c3FZUIEeimyMrxtKzKVw" key="fakeScriptExpression">
                <expression xmi:type="expression:Expression" xmi:id="_w8c3FpUIEeimyMrxtKzKVw" name="nitElimination1()" content="import com.fasterxml.jackson.databind.ObjectMapper&#xD;&#xA;import com.fasterxml.jackson.databind.DeserializationFeature;&#xD;&#xA;import java.util.logging.Level;&#xD;&#xA;import java.util.logging.Logger;&#xD;&#xA;import org.apache.commons.lang.StringUtils;&#xD;&#xA;import org.springframework.context.ApplicationContext;&#xD;&#xA;import org.springframework.context.support.ClassPathXmlApplicationContext;&#xD;&#xA;import com.bbva.drools.dto.BaseAchDTO;&#xD;&#xA; &#xD;&#xA;//Logger and mapper configuration&#xD;&#xA;Logger LOGGER = Logger.getLogger(&quot;InfoLogging&quot;);&#xD;&#xA;LOGGER.info(&quot;Logging an INFO-level message: Elimination of NITs # 1&quot;);&#xD;&#xA;ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#xD;&#xA;ObjectMapper mapper = new ObjectMapper();&#xD;&#xA;mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);&#xD;&#xA;&#xD;&#xA;//Obtaining inputPayload from execution0 output (SOI-ACH service)&#xD;&#xA;String inputPayload = validacionIngresos.getExecutions()[0].getOutputPayload();&#xD;&#xA;Map readValue = mapper.readValue(inputPayload, Map.class);&#xD;&#xA;&#xD;&#xA;//Creating list for the output&#xD;&#xA;List&lt;Object> nits = new ArrayList&lt;>();&#xD;&#xA;Map&lt;Object, Object> outPayload = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#xD;&#xA;if(readValue.infoNits){&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;for(int i = 0; i &lt; readValue.infoNits.size(); i++){&#x9;&#x9;&#x9;&#x9;//Elimination of NIT from outputPayload if there are more than 90 days between payments&#xD;&#xA;&#x9;&#x9;String nit = readValue.infoNits[i].nit;&#xD;&#xA;&#x9;&#x9;if(readValue.infoNits[i].isContinuous == true){&#xD;&#xA;&#x9;&#x9;&#x9;nits.add(readValue.infoNits[i]);&#xD;&#xA;&#x9;&#x9;}else{&#xD;&#xA;&#x9;&#x9;&#x9;for(int j = 0; j &lt; readValue.byMonth.size(); j++){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(readValue.byMonth[j].payments.get(nit)){&#x9;&#x9;&#x9;//Elimination of payments from a eliminated NIT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;readValue.byMonth[j].sumValue = readValue.byMonth[j].sumValue - readValue.byMonth[j].payments.get(nit).value;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;readValue.byMonth[j].payments.remove(nit);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(readValue.byMonth[j].payments.size() == 0){&#x9;&#x9;//Elimination of month with no payments&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;readValue.byMonth.remove(j);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//Configuration of output payload for SOI-ACH&#xD;&#xA;outPayload.infoNits = nits;&#xD;&#xA;outPayload.byMonth = readValue.byMonth;&#xD;&#xA;&#xD;&#xA;String outPayloadStr = new ObjectMapper().writeValueAsString(outPayload);&#xD;&#xA;validacionIngresos.getExecutions()[0].setOutputPayload(outPayloadStr);&#xD;&#xA;&#xD;&#xA;return validacionIngresos;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.lang.Object" returnTypeFixed="true">
                  <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4RiCJ_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
                </expression>
              </parameters>
            </configuration>
            <outputs xmi:type="expression:Operation" xmi:id="_w8c3GJUIEeimyMrxtKzKVw">
              <leftOperand xmi:type="expression:Expression" xmi:id="_w8c3GZUIEeimyMrxtKzKVw" name="validacionIngresos" content="validacionIngresos" type="TYPE_VARIABLE" returnType="com.bbva.model.AutomaticProcessTask">
                <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4SIup_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
              </leftOperand>
              <rightOperand xmi:type="expression:Expression" xmi:id="_w8c3G5UIEeimyMrxtKzKVw" name="result" content="result" type="CONNECTOR_OUTPUT_TYPE" returnType="java.lang.Object">
                <referencedElements xmi:type="definition:Output" xmi:id="_w8deIJUIEeimyMrxtKzKVw" name="result" type="java.lang.Object"/>
              </rightOperand>
              <operator xmi:type="expression:Operator" xmi:id="_w8deIZUIEeimyMrxtKzKVw" type="ASSIGNMENT"/>
            </outputs>
          </connectors>
          <connectors xmi:type="process:Connector" xmi:id="_lBWOcJTxEeimyMrxtKzKVw" name="rulesRecent()" definitionId="scripting-groovy-script" event="ON_ENTER" definitionVersion="1.0.1">
            <configuration xmi:type="connectorconfiguration:ConnectorConfiguration" xmi:id="_lBWOcZTxEeimyMrxtKzKVw" definitionId="scripting-groovy-script" version="1.0.1" modelVersion="7.4.0-004">
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_lBWOcpTxEeimyMrxtKzKVw" key="script">
                <expression xmi:type="expression:Expression" xmi:id="_lBWOc5TxEeimyMrxtKzKVw" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnTypeFixed="true"/>
              </parameters>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_lBWOdJTxEeimyMrxtKzKVw" key="variables"/>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_lBWOdZTxEeimyMrxtKzKVw" key="fakeScriptExpression">
                <expression xmi:type="expression:Expression" xmi:id="_lBWOdpTxEeimyMrxtKzKVw" name="rulesRecent()" content="import com.fasterxml.jackson.databind.ObjectMapper&#xD;&#xA;import com.fasterxml.jackson.databind.DeserializationFeature;&#xD;&#xA;import java.util.logging.Level;&#xD;&#xA;import java.util.logging.Logger;&#xD;&#xA;import org.apache.commons.lang.StringUtils;&#xD;&#xA;import org.springframework.context.ApplicationContext;&#xD;&#xA;import org.springframework.context.support.ClassPathXmlApplicationContext;&#xD;&#xA;import org.kie.api.KieServices;&#xD;&#xA;import org.kie.api.runtime.KieContainer;&#xD;&#xA;import org.kie.api.runtime.KieSession;&#xD;&#xA;import com.bbva.drools.dto.BaseAchDTO;&#xD;&#xA;import com.bbva.drools.reglas.validacion.dto.reglas.ReglaNegocioDTO;&#xD;&#xA; &#xD;&#xA;//Logger and mapper configuration&#xD;&#xA;Logger LOGGER = Logger.getLogger(&quot;InfoLogging&quot;);&#xD;&#xA;LOGGER.info(&quot;Logging an INFO-level message: Rule for elimination of NITs with no payments in the last 60 days&quot;);&#xD;&#xA;ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#xD;&#xA;ObjectMapper mapper = new ObjectMapper();&#xD;&#xA;mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);&#xD;&#xA;&#xD;&#xA;//Function to get rule, response and message for a particular rule&#xD;&#xA;public Map printRule(int numberRule, String nit){&#xD;&#xA;&#x9;Logger LOGGER1 = Logger.getLogger(&quot;Rule:&quot;);&#xD;&#xA;&#x9;try {&#xD;&#xA;&#x9;&#x9;KieServices ks = KieServices.Factory.get();&#xD;&#xA;&#x9;&#x9;KieContainer kContainer = ks.getKieClasspathContainer();&#xD;&#xA;&#x9;&#x9;KieSession kSession = kContainer.newKieSession(&quot;ksession-rules&quot;);&#xD;&#xA;&#x9;&#x9;baseAchDTO.setReglasNegocioDTO([]);&#xD;&#xA;&#x9;&#x9;kSession.insert(baseAchDTO);&#xD;&#xA;&#x9;&#x9;kSession.fireAllRules();&#xD;&#xA;&#x9;&#x9;ReglaNegocioDTO rule = baseAchDTO.getReglasNegocioDTO().get(numberRule);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;//Map with rule, response and message for rule located in (numberRule)&#xD;&#xA;&#x9;&#x9;Map&lt;Object, Object> response = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;response.nit = nit;&#xD;&#xA;&#x9;&#x9;response.regla = rule.getRespuestaObtenida().getRegla();&#xD;&#xA;&#x9;&#x9;response.respuesta = rule.getRespuestaObtenida().isRespuesta();&#xD;&#xA;&#x9;&#x9;response.mensaje = rule.getRespuestaObtenida().getMensajeRespuesta();&#xD;&#xA;&#x9;&#x9;return response;&#xD;&#xA;&#x9;} catch (Exception e) {&#xD;&#xA;&#x9;&#x9;LOGGER1.info(&quot;Error: &quot; + e.message);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//Obtaining inputPayload from execution0 output (SOI-ACH service)&#xD;&#xA;String inputPayload = validacionIngresos.getExecutions()[0].getOutputPayload();&#xD;&#xA;Map readValue = mapper.readValue(inputPayload, Map.class);&#xD;&#xA;&#xD;&#xA;//Obtaining inputPayload from execution1 output (Drools)&#xD;&#xA;String inputPayload1 = validacionIngresos.getExecutions()[1].getOutputPayload();&#xD;&#xA;Map readValue1 = mapper.readValue(inputPayload1, Map.class);&#xD;&#xA;&#xD;&#xA;//Creating list for the output&#xD;&#xA;List&lt;Object> output = new ArrayList&lt;>();&#xD;&#xA;Map&lt;Object, Object> outPayload = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;output = readValue1.reglas;&#xD;&#xA;&#xD;&#xA;//Execution of rules maxDiasReciente&#xD;&#xA;if(readValue.infoNits){&#xD;&#xA;&#x9;for(int i = 0; i &lt; readValue.infoNits.size(); i++){&#x9;&#x9;&#x9;&#x9;//Execution of rules 2 and 3 for each NIT&#xD;&#xA;&#x9;&#x9;baseAchDTO.setMaxDiasReciente(readValue.infoNits[i].isActual);&#xD;&#xA;&#x9;&#x9;output.add(printRule(2,readValue.infoNits[i].nit));&#xD;&#xA;&#x9;&#x9;output.add(printRule(3,readValue.infoNits[i].nit));&#xD;&#xA;&#x9;}&#x9;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//Configuration of output payload for Drools&#xD;&#xA;outPayload.reglas = output;&#xD;&#xA;&#xD;&#xA;String outPayloadStr = new ObjectMapper().writeValueAsString(outPayload);&#xD;&#xA;validacionIngresos.getExecutions()[1].setOutputPayload(outPayloadStr);&#xD;&#xA;&#xD;&#xA;return validacionIngresos;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.lang.Object" returnTypeFixed="true">
                  <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4RiC5_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
                  <referencedElements xmi:type="process:JavaObjectData" xmi:id="_C4RiDJ_MEeiV_aNwidcLeQ" name="baseAchDTO" dataType="_WFKfMo6OEei8kvcpw0fSig" className="com.bbva.drools.dto.BaseAchDTO"/>
                </expression>
              </parameters>
            </configuration>
            <outputs xmi:type="expression:Operation" xmi:id="_lBWOeZTxEeimyMrxtKzKVw">
              <leftOperand xmi:type="expression:Expression" xmi:id="_lBWOepTxEeimyMrxtKzKVw" name="validacionIngresos" content="validacionIngresos" type="TYPE_VARIABLE" returnType="com.bbva.model.AutomaticProcessTask">
                <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4SIv5_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
              </leftOperand>
              <rightOperand xmi:type="expression:Expression" xmi:id="_lBWOfJTxEeimyMrxtKzKVw" name="result" content="result" type="CONNECTOR_OUTPUT_TYPE" returnType="java.lang.Object">
                <referencedElements xmi:type="definition:Output" xmi:id="_lBWOfZTxEeimyMrxtKzKVw" name="result" type="java.lang.Object"/>
              </rightOperand>
              <operator xmi:type="expression:Operator" xmi:id="_lBWOfpTxEeimyMrxtKzKVw" type="ASSIGNMENT"/>
            </outputs>
          </connectors>
          <connectors xmi:type="process:Connector" xmi:id="_2EnqwJUIEeimyMrxtKzKVw" name="nitElimination2()" definitionId="scripting-groovy-script" event="ON_ENTER" definitionVersion="1.0.1">
            <configuration xmi:type="connectorconfiguration:ConnectorConfiguration" xmi:id="_2EnqwZUIEeimyMrxtKzKVw" definitionId="scripting-groovy-script" version="1.0.1" modelVersion="7.4.0-004">
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_2EnqwpUIEeimyMrxtKzKVw" key="script">
                <expression xmi:type="expression:Expression" xmi:id="_2Enqw5UIEeimyMrxtKzKVw" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnTypeFixed="true"/>
              </parameters>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_2EnqxJUIEeimyMrxtKzKVw" key="variables"/>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_2EnqxZUIEeimyMrxtKzKVw" key="fakeScriptExpression">
                <expression xmi:type="expression:Expression" xmi:id="_2EnqxpUIEeimyMrxtKzKVw" name="nitElimination2()" content="import com.fasterxml.jackson.databind.ObjectMapper&#xD;&#xA;import com.fasterxml.jackson.databind.DeserializationFeature;&#xD;&#xA;import java.util.logging.Level;&#xD;&#xA;import java.util.logging.Logger;&#xD;&#xA;import org.apache.commons.lang.StringUtils;&#xD;&#xA;import org.springframework.context.ApplicationContext;&#xD;&#xA;import org.springframework.context.support.ClassPathXmlApplicationContext;&#xD;&#xA;import com.bbva.drools.dto.BaseAchDTO;&#xD;&#xA;import com.bbva.drools.reglas.validacion.dto.reglas.ReglaNegocioDTO;&#xD;&#xA; &#xD;&#xA;//Logger and mapper configuration&#xD;&#xA;Logger LOGGER = Logger.getLogger(&quot;InfoLogging&quot;);&#xD;&#xA;LOGGER.info(&quot;Logging an INFO-level message: Elimination of NITs # 2&quot;);&#xD;&#xA;ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#xD;&#xA;ObjectMapper mapper = new ObjectMapper();&#xD;&#xA;mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);&#xD;&#xA;&#xD;&#xA;//Obtaining inputPayload from execution0 output (SOI-ACH service)&#xD;&#xA;String inputPayload = validacionIngresos.getExecutions()[0].getOutputPayload();&#xD;&#xA;Map readValue = mapper.readValue(inputPayload, Map.class);&#xD;&#xA;&#xD;&#xA;//Creating list for the output&#xD;&#xA;List&lt;Object> nits = new ArrayList&lt;>();&#xD;&#xA;Map&lt;Object, Object> outPayload = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#xD;&#xA;if(readValue.infoNits){&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;for(int i = 0; i &lt; readValue.infoNits.size(); i++){&#x9;&#x9;&#x9;&#x9;//Elimination of NIT from outputPayload if there are more than 90 days between payments&#xD;&#xA;&#x9;&#x9;String nit = readValue.infoNits[i].nit;&#xD;&#xA;&#x9;&#x9;if(readValue.infoNits[i].isContinuous == true){&#xD;&#xA;&#x9;&#x9;&#x9;nits.add(readValue.infoNits[i]);&#xD;&#xA;&#x9;&#x9;}else{&#xD;&#xA;&#x9;&#x9;&#x9;for(int j = 0; j &lt; readValue.byMonth.size(); j++){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(readValue.byMonth[j].payments.get(nit)){&#x9;&#x9;&#x9;//Elimination of payments from a eliminated NIT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;readValue.byMonth[j].sumValue = readValue.byMonth[j].sumValue - readValue.byMonth[j].payments.get(nit).value;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;readValue.byMonth[j].payments.remove(nit);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(readValue.byMonth[j].payments.size() == 0){&#x9;&#x9;//Elimination of month with no payments&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;readValue.byMonth.remove(j);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//Configuration of output payload for SOI-ACH&#xD;&#xA;outPayload.infoNits = nits;&#xD;&#xA;outPayload.byMonth = readValue.byMonth;&#xD;&#xA;&#xD;&#xA;String outPayloadStr = new ObjectMapper().writeValueAsString(outPayload);&#xD;&#xA;validacionIngresos.getExecutions()[0].setOutputPayload(outPayloadStr);&#xD;&#xA;&#xD;&#xA;return validacionIngresos;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.lang.Object" returnTypeFixed="true">
                  <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4RiD5_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
                </expression>
              </parameters>
            </configuration>
            <outputs xmi:type="expression:Operation" xmi:id="_2EnqyJUIEeimyMrxtKzKVw">
              <leftOperand xmi:type="expression:Expression" xmi:id="_2EnqyZUIEeimyMrxtKzKVw" name="validacionIngresos" content="validacionIngresos" type="TYPE_VARIABLE" returnType="com.bbva.model.AutomaticProcessTask">
                <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4SIxJ_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
              </leftOperand>
              <rightOperand xmi:type="expression:Expression" xmi:id="_2Enqy5UIEeimyMrxtKzKVw" name="result" content="result" type="CONNECTOR_OUTPUT_TYPE" returnType="java.lang.Object">
                <referencedElements xmi:type="definition:Output" xmi:id="_2EnqzJUIEeimyMrxtKzKVw" name="result" type="java.lang.Object"/>
              </rightOperand>
              <operator xmi:type="expression:Operator" xmi:id="_2EnqzZUIEeimyMrxtKzKVw" type="ASSIGNMENT"/>
            </outputs>
          </connectors>
          <connectors xmi:type="process:Connector" xmi:id="_kobcgJUPEeimyMrxtKzKVw" name="rulesNovedad()" definitionId="scripting-groovy-script" event="ON_ENTER" definitionVersion="1.0.1">
            <configuration xmi:type="connectorconfiguration:ConnectorConfiguration" xmi:id="_kobcgZUPEeimyMrxtKzKVw" definitionId="scripting-groovy-script" version="1.0.1" modelVersion="7.4.0-004">
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_kobcgpUPEeimyMrxtKzKVw" key="script">
                <expression xmi:type="expression:Expression" xmi:id="_kobcg5UPEeimyMrxtKzKVw" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnTypeFixed="true"/>
              </parameters>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_kobchJUPEeimyMrxtKzKVw" key="variables"/>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_kobchZUPEeimyMrxtKzKVw" key="fakeScriptExpression">
                <expression xmi:type="expression:Expression" xmi:id="_kobchpUPEeimyMrxtKzKVw" name="rulesNovedad()" content="import com.fasterxml.jackson.databind.ObjectMapper&#xD;&#xA;import com.fasterxml.jackson.databind.DeserializationFeature;&#xD;&#xA;import java.util.logging.Level;&#xD;&#xA;import java.util.logging.Logger;&#xD;&#xA;import org.apache.commons.lang.StringUtils;&#xD;&#xA;import org.springframework.context.ApplicationContext;&#xD;&#xA;import org.springframework.context.support.ClassPathXmlApplicationContext;&#xD;&#xA;import org.kie.api.KieServices;&#xD;&#xA;import org.kie.api.runtime.KieContainer;&#xD;&#xA;import org.kie.api.runtime.KieSession;&#xD;&#xA;import com.bbva.drools.dto.BaseAchDTO;&#xD;&#xA;import com.bbva.drools.reglas.validacion.dto.reglas.ReglaNegocioDTO;&#xD;&#xA; &#xD;&#xA;//Logger and mapper configuration&#xD;&#xA;Logger LOGGER = Logger.getLogger(&quot;InfoLogging&quot;);&#xD;&#xA;LOGGER.info(&quot;Logging an INFO-level message: Rule for elimination of NITs with novelty equals to RETIRO&quot;);&#xD;&#xA;ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#xD;&#xA;ObjectMapper mapper = new ObjectMapper();&#xD;&#xA;mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);&#xD;&#xA;&#xD;&#xA;//Function to get rule, response and message for a particular rule&#xD;&#xA;public Map printRule(int numberRule, String nit){&#xD;&#xA;&#x9;Logger LOGGER1 = Logger.getLogger(&quot;Rule:&quot;);&#xD;&#xA;&#x9;try {&#xD;&#xA;&#x9;&#x9;KieServices ks = KieServices.Factory.get();&#xD;&#xA;&#x9;&#x9;KieContainer kContainer = ks.getKieClasspathContainer();&#xD;&#xA;&#x9;&#x9;KieSession kSession = kContainer.newKieSession(&quot;ksession-rules&quot;);&#xD;&#xA;&#x9;&#x9;baseAchDTO.setReglasNegocioDTO([]);&#xD;&#xA;&#x9;&#x9;kSession.insert(baseAchDTO);&#xD;&#xA;&#x9;&#x9;kSession.fireAllRules();&#xD;&#xA;&#x9;&#x9;ReglaNegocioDTO rule = baseAchDTO.getReglasNegocioDTO().get(numberRule);&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;//Map with rule, response and message for rule located in (numberRule)&#xD;&#xA;&#x9;&#x9;Map&lt;Object, Object> response = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;response.nit = nit;&#xD;&#xA;&#x9;&#x9;response.regla = rule.getRespuestaObtenida().getRegla();&#xD;&#xA;&#x9;&#x9;response.respuesta = rule.getRespuestaObtenida().isRespuesta();&#xD;&#xA;&#x9;&#x9;response.mensaje = rule.getRespuestaObtenida().getMensajeRespuesta();&#xD;&#xA;&#x9;&#x9;return response;&#xD;&#xA;&#x9;} catch (Exception e) {&#xD;&#xA;&#x9;&#x9;LOGGER1.info(&quot;Error: &quot; + e.message);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//Obtaining inputPayload from execution0 output (SOI-ACH service)&#xD;&#xA;String inputPayload = validacionIngresos.getExecutions()[0].getOutputPayload();&#xD;&#xA;Map readValue = mapper.readValue(inputPayload, Map.class);&#xD;&#xA;&#xD;&#xA;//Creating list for the output&#xD;&#xA;List&lt;Object> output = new ArrayList&lt;>();&#xD;&#xA;Map&lt;Object, Object> outPayload = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#xD;&#xA;//Execution of rules maxDiasDiscontinuos&#xD;&#xA;if(readValue.byMonth){&#xD;&#xA;&#x9;//Date treatments&#xD;&#xA;&#x9;/*Date todayDate = Date.parse(&quot;yyyy-MM-dd&quot;,new Date().format(&quot;yyyy-MM-dd&quot;));&#x9;// Date today&#xD;&#xA;&#x9;String todayDateStr = todayDate.format(&quot;yyyy-MM-dd&quot;);&#xD;&#xA;&#x9;int cMonth = Integer.parseInt(todayDateStr.split(&quot;-&quot;)[1]);&#x9;&#x9;&#x9;&#x9;&#x9;//Current Month&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;int[] months = [cMonth, cMonth-1, cMonth-2, cMonth-3];&#xD;&#xA;&#xD;&#xA;&#x9;for(int i = 0; i &lt; readValue.byMonth[i]; i++){&#x9;&#x9;&#x9;&#x9;//Execution of rules 0 and 1 for each NIT&#xD;&#xA;&#x9;&#x9;if(readValue.byMonth[i].number &lt; 0){&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;if(readValue.byMonth[i].number.equal(months[j]) &amp;&amp; readValue.byMonth[i].number.equal(months[j])){&#xD;&#xA;&#x9;&#x9;&#x9;tipoNovedad = &quot;RETIRO&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;baseAchDTO.setTipoNovedad(tipoNovedad);&#xD;&#xA;&#x9;&#x9;output.add(printRule(4,readValue.infoNits[i].nit));&#xD;&#xA;&#x9;}*/&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;//Configuration of output payload for Drools&#xD;&#xA;outPayload.reglas = output;&#xD;&#xA;String outPayloadStr = new ObjectMapper().writeValueAsString(outPayload);&#xD;&#xA;validacionIngresos.getExecutions()[1].setOutputPayload(outPayloadStr);&#xD;&#xA;&#xD;&#xA;return validacionIngresos;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.lang.Object" returnTypeFixed="true">
                  <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4RiEp_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
                </expression>
              </parameters>
            </configuration>
            <outputs xmi:type="expression:Operation" xmi:id="_kobciJUPEeimyMrxtKzKVw">
              <leftOperand xmi:type="expression:Expression" xmi:id="_kobciZUPEeimyMrxtKzKVw"/>
              <rightOperand xmi:type="expression:Expression" xmi:id="_kobcipUPEeimyMrxtKzKVw" name="result" content="result" type="CONNECTOR_OUTPUT_TYPE" returnType="java.lang.Object">
                <referencedElements xmi:type="definition:Output" xmi:id="_kobci5UPEeimyMrxtKzKVw" name="result" type="java.lang.Object"/>
              </rightOperand>
              <operator xmi:type="expression:Operator" xmi:id="_kobcjJUPEeimyMrxtKzKVw" type="ASSIGNMENT"/>
            </outputs>
          </connectors>
          <connectors xmi:type="process:Connector" xmi:id="_80p1IJT9EeimyMrxtKzKVw" name="rulesMonths()" definitionId="scripting-groovy-script" event="ON_ENTER" definitionVersion="1.0.1">
            <configuration xmi:type="connectorconfiguration:ConnectorConfiguration" xmi:id="_80p1IZT9EeimyMrxtKzKVw" definitionId="scripting-groovy-script" version="1.0.1" modelVersion="7.4.0-004">
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_80p1IpT9EeimyMrxtKzKVw" key="script">
                <expression xmi:type="expression:Expression" xmi:id="_80p1I5T9EeimyMrxtKzKVw" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnTypeFixed="true"/>
              </parameters>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_80p1JJT9EeimyMrxtKzKVw" key="variables"/>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_80p1JZT9EeimyMrxtKzKVw" key="fakeScriptExpression">
                <expression xmi:type="expression:Expression" xmi:id="_80p1JpT9EeimyMrxtKzKVw" name="rulesMonths()" content="import com.fasterxml.jackson.databind.ObjectMapper&#xD;&#xA;import com.fasterxml.jackson.databind.DeserializationFeature;&#xD;&#xA;import java.util.logging.Level;&#xD;&#xA;import java.util.logging.Logger;&#xD;&#xA;import org.apache.commons.lang.StringUtils;&#xD;&#xA;import org.springframework.context.ApplicationContext;&#xD;&#xA;import org.springframework.context.support.ClassPathXmlApplicationContext;&#xD;&#xA;import org.kie.api.KieServices;&#xD;&#xA;import org.kie.api.runtime.KieContainer;&#xD;&#xA;import org.kie.api.runtime.KieSession;&#xD;&#xA;import com.bbva.drools.dto.BaseAchDTO;&#xD;&#xA;import com.bbva.drools.reglas.validacion.dto.reglas.ReglaNegocioDTO;&#xD;&#xA; &#xD;&#xA;//Logger and mapper configuration&#xD;&#xA;Logger LOGGER = Logger.getLogger(&quot;InfoLogging&quot;);&#xD;&#xA;LOGGER.info(&quot;Logging an INFO-level message: Rule for counting the quantity of months with valid payments&quot;);&#xD;&#xA;ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#xD;&#xA;ObjectMapper mapper = new ObjectMapper();&#xD;&#xA;mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);&#xD;&#xA;&#xD;&#xA;//Function to get rule, response and message for a particular rule&#xD;&#xA;public Map printRule(int numberRule){&#xD;&#xA;&#x9;Logger LOGGER1 = Logger.getLogger(&quot;Rule:&quot;);&#xD;&#xA;&#x9;try {&#xD;&#xA;&#x9;&#x9;KieServices ks = KieServices.Factory.get();&#xD;&#xA;&#x9;&#x9;KieContainer kContainer = ks.getKieClasspathContainer();&#xD;&#xA;&#x9;&#x9;KieSession kSession = kContainer.newKieSession(&quot;ksession-rules&quot;);&#xD;&#xA;&#x9;&#x9;baseAchDTO.setReglasNegocioDTO([]);&#xD;&#xA;&#x9;&#x9;kSession.insert(baseAchDTO);&#xD;&#xA;&#x9;&#x9;kSession.fireAllRules();&#xD;&#xA;&#x9;&#x9;ReglaNegocioDTO rule = baseAchDTO.getReglasNegocioDTO().get(numberRule);&#xD;&#xA;&#x9;&#x9;LOGGER1.info(&quot;rules: &quot; + baseAchDTO.getReglasNegocioDTO());&#xD;&#xA;&#x9;&#x9;//Map with rule, response and message for rule located in (numberRule)&#xD;&#xA;&#x9;&#x9;Map&lt;Object, Object> response = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;&#x9;&#x9;response.regla = rule.getRespuestaObtenida().getRegla();&#xD;&#xA;&#x9;&#x9;response.respuesta = rule.getRespuestaObtenida().isRespuesta();&#xD;&#xA;&#x9;&#x9;response.mensaje = rule.getRespuestaObtenida().getMensajeRespuesta();&#xD;&#xA;&#x9;&#x9;return response;&#xD;&#xA;&#x9;} catch (Exception e) {&#xD;&#xA;&#x9;&#x9;LOGGER1.info(&quot;Error: &quot; + e.message);&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//Obtaining inputPayload from execution0 output (SOI-ACH service)&#xD;&#xA;String inputPayload = validacionIngresos.getExecutions()[0].getOutputPayload();&#xD;&#xA;Map readValue = mapper.readValue(inputPayload, Map.class);&#xD;&#xA;&#xD;&#xA;//Obtaining inputPayload from execution1 output (Drools)&#xD;&#xA;String inputPayload1 = validacionIngresos.getExecutions()[1].getOutputPayload();&#xD;&#xA;Map readValue1 = mapper.readValue(inputPayload1, Map.class);&#xD;&#xA;&#xD;&#xA;//Creating list for the output&#xD;&#xA;List&lt;Object> output = new ArrayList&lt;>();&#xD;&#xA;Map&lt;Object, Object> outPayload = new LinkedHashMap&lt;Object, Object>();&#xD;&#xA;output = readValue1.reglas;&#xD;&#xA;&#xD;&#xA;//Execution of rules maxDiasReciente&#xD;&#xA;if(readValue.byMonth){&#xD;&#xA;&#x9;baseAchDTO.setMesesPagos(readValue.byMonth.size());&#xD;&#xA;&#x9;output.add(printRule(5));&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Execution of rule 4&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;//Configuration of output payload for Drools&#xD;&#xA;outPayload.reglas = output;&#xD;&#xA;String outPayloadStr = new ObjectMapper().writeValueAsString(outPayload);&#xD;&#xA;validacionIngresos.getExecutions()[1].setOutputPayload(outPayloadStr);&#xD;&#xA;&#xD;&#xA;return validacionIngresos;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.lang.Object" returnTypeFixed="true">
                  <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4RiFZ_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
                  <referencedElements xmi:type="process:JavaObjectData" xmi:id="_C4RiFp_MEeiV_aNwidcLeQ" name="baseAchDTO" dataType="_WFKfMo6OEei8kvcpw0fSig" className="com.bbva.drools.dto.BaseAchDTO"/>
                </expression>
              </parameters>
            </configuration>
            <outputs xmi:type="expression:Operation" xmi:id="_80p1KZT9EeimyMrxtKzKVw">
              <leftOperand xmi:type="expression:Expression" xmi:id="_80p1KpT9EeimyMrxtKzKVw" name="validacionIngresos" content="validacionIngresos" type="TYPE_VARIABLE" returnType="com.bbva.model.AutomaticProcessTask">
                <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_C4SIzZ_MEeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
              </leftOperand>
              <rightOperand xmi:type="expression:Expression" xmi:id="_80p1LJT9EeimyMrxtKzKVw" name="result" content="result" type="CONNECTOR_OUTPUT_TYPE" returnType="java.lang.Object">
                <referencedElements xmi:type="definition:Output" xmi:id="_80p1LZT9EeimyMrxtKzKVw" name="result" type="java.lang.Object"/>
              </rightOperand>
              <operator xmi:type="expression:Operator" xmi:id="_80p1LpT9EeimyMrxtKzKVw" type="ASSIGNMENT"/>
            </outputs>
          </connectors>
          <connectors xmi:type="process:Connector" xmi:id="_SQPX0J_REeiV_aNwidcLeQ" name="asd" definitionId="EjecutarDrools" event="ON_ENTER" definitionVersion="1.0.0">
            <configuration xmi:type="connectorconfiguration:ConnectorConfiguration" xmi:id="_SQPX0Z_REeiV_aNwidcLeQ" definitionId="EjecutarDrools" version="1.0.0" modelVersion="7.6.0-002">
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_SQPX0p_REeiV_aNwidcLeQ" key="regla">
                <expression xmi:type="expression:Expression" xmi:id="_SQPX05_REeiV_aNwidcLeQ" name="asd" content="asd" returnTypeFixed="true"/>
              </parameters>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_SQPX1J_REeiV_aNwidcLeQ" key="datosEntrada">
                <expression xmi:type="expression:Expression" xmi:id="_SQPX1Z_REeiV_aNwidcLeQ" name="datosEntrada()" content="import com.fasterxml.jackson.databind.DeserializationFeature&#xD;&#xA;import com.fasterxml.jackson.databind.ObjectMapper&#xD;&#xA;&#xD;&#xA;ObjectMapper mapper = new ObjectMapper();&#xD;&#xA;mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);&#xD;&#xA;String inputPayload = validacionIngresos.getExecutions()[0].getOutputPayload();&#xD;&#xA;return mapper.readValue(inputPayload, Map.class);&#xD;&#xA;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.util.Map" returnTypeFixed="true">
                  <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_SQPX1p_REeiV_aNwidcLeQ" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask"/>
                </expression>
              </parameters>
            </configuration>
            <outputs xmi:type="expression:Operation" xmi:id="_SQPX15_REeiV_aNwidcLeQ">
              <leftOperand xmi:type="expression:Expression" xmi:id="_SQPX2J_REeiV_aNwidcLeQ"/>
              <rightOperand xmi:type="expression:Expression" xmi:id="_SQPX2Z_REeiV_aNwidcLeQ" name="output" content="output" type="CONNECTOR_OUTPUT_TYPE" returnType="java.util.Map">
                <referencedElements xmi:type="definition:Output" xmi:id="_SQPX2p_REeiV_aNwidcLeQ" name="output" type="java.util.Map"/>
              </rightOperand>
              <operator xmi:type="expression:Operator" xmi:id="_SQPX25_REeiV_aNwidcLeQ" type="ASSIGNMENT"/>
            </outputs>
          </connectors>
          <loopCondition xmi:type="expression:Expression" xmi:id="_gbjZJJA9EeiFubttvGmCkQ" name="" content="" returnType="java.lang.Boolean" returnTypeFixed="true"/>
          <loopMaximum xmi:type="expression:Expression" xmi:id="_gbjZJZA9EeiFubttvGmCkQ" name="" content="" returnType="java.lang.Integer" returnTypeFixed="true"/>
          <cardinalityExpression xmi:type="expression:Expression" xmi:id="_gbjZJpA9EeiFubttvGmCkQ" name="" content="" returnType="java.lang.Integer" returnTypeFixed="true"/>
          <iteratorExpression xmi:type="expression:Expression" xmi:id="_gbjZKJA9EeiFubttvGmCkQ" name="multiInstanceIterator" content="multiInstanceIterator" type="MULTIINSTANCE_ITERATOR_TYPE" returnType="java.lang.Object" returnTypeFixed="true"/>
          <completionCondition xmi:type="expression:Expression" xmi:id="_gbjZJ5A9EeiFubttvGmCkQ" name="" content="" returnType="java.lang.Boolean" returnTypeFixed="true"/>
        </elements>
      </elements>
      <resourceFolders xmi:type="process:ResourceFolder" xmi:id="_WIkYQI6OEei8kvcpw0fSig" path="_WFKe8Y6OEei8kvcpw0fSig/application/application"/>
      <mandatorySymbol xmi:type="expression:Expression" xmi:id="_WFKfCY6OEei8kvcpw0fSig" name="" content="" returnTypeFixed="true"/>
      <mandatoryLabel xmi:type="expression:Expression" xmi:id="_WFKfCo6OEei8kvcpw0fSig" name="" content="" returnTypeFixed="true"/>
      <errorTemplate xmi:type="process:AssociatedFile" xmi:id="_WFKfC46OEei8kvcpw0fSig" path="_4iV6QY6NEei8kvcpw0fSig/html/error.html"/>
      <processTemplate xmi:type="process:AssociatedFile" xmi:id="_WFKfDI6OEei8kvcpw0fSig" path="_WFKe8Y6OEei8kvcpw0fSig/html/process.html"/>
      <pageTemplate xmi:type="process:AssociatedFile" xmi:id="_WFKfDY6OEei8kvcpw0fSig" path="_WFKe8Y6OEei8kvcpw0fSig/html/page.html"/>
      <consultationTemplate xmi:type="process:AssociatedFile" xmi:id="_WFKfDo6OEei8kvcpw0fSig" path="_WFKe8Y6OEei8kvcpw0fSig/html/consultation.html"/>
      <data xmi:type="process:JavaObjectData" xmi:id="_bvby8I62EeiCd4A7RChmhg" name="grantingTicketDTO" dataType="_WFKfMo6OEei8kvcpw0fSig" className="com.bbva.cnmc.proxyaso.dto.aso.GrantingTicketDTO">
        <defaultValue xmi:type="expression:Expression" xmi:id="_6Y1agJA9EeiFubttvGmCkQ" name="init_grantingTicketDTO()" content="import org.springframework.asm.Context;&#xD;&#xA;import org.springframework.context.ApplicationContext&#xD;&#xA;import org.springframework.context.support.ClassPathXmlApplicationContext&#xD;&#xA;import org.springframework.http.HttpMethod;&#xD;&#xA;import org.springframework.http.MediaType;&#xD;&#xA;import com.bbva.cnmc.proxyaso.dto.aso.GrantingTicketDTO;&#xD;&#xA;&#xD;&#xA;ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);&#xD;&#xA;&#xD;&#xA;GrantingTicketDTO grantingTicketDTO = (GrantingTicketDTO) context.getBean(&quot;grantingTicketDTO&quot;);&#xD;&#xA;grantingTicketDTO.setUrlGrantingTicketService(urlGrantingTicket);&#xD;&#xA;grantingTicketDTO.setConsumerID(consumerID);&#xD;&#xA;grantingTicketDTO.setAuthenticationType(authenticationType);&#xD;&#xA;grantingTicketDTO.setAuthenticationData(authenticationData);&#xD;&#xA;grantingTicketDTO.setIvUser(ivUser);&#xD;&#xA;grantingTicketDTO.setIvTicket(ivTicket);&#xD;&#xA;grantingTicketDTO.setOperacionHttpServicioGrantingTicket(HttpMethod.POST);&#xD;&#xA;grantingTicketDTO.setGrantingTicketMediaType(MediaType.APPLICATION_JSON);&#xD;&#xA;&#xD;&#xA;return grantingTicketDTO;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="com.bbva.cnmc.proxyaso.dto.aso.GrantingTicketDTO">
          <referencedElements xmi:type="parameter:Parameter" xmi:id="_6Y1agZA9EeiFubttvGmCkQ" name="urlGrantingTicket" typeClassname="java.lang.String"/>
          <referencedElements xmi:type="parameter:Parameter" xmi:id="_6Y1agpA9EeiFubttvGmCkQ" name="authenticationData" typeClassname="java.lang.String"/>
          <referencedElements xmi:type="parameter:Parameter" xmi:id="_6Y1ag5A9EeiFubttvGmCkQ" name="ivTicket" typeClassname="java.lang.String"/>
          <referencedElements xmi:type="parameter:Parameter" xmi:id="_6Y1ahJA9EeiFubttvGmCkQ" name="consumerID" typeClassname="java.lang.String"/>
          <referencedElements xmi:type="parameter:Parameter" xmi:id="_6Y1ahZA9EeiFubttvGmCkQ" name="authenticationType" typeClassname="java.lang.String"/>
          <referencedElements xmi:type="parameter:Parameter" xmi:id="_6Y1ahpA9EeiFubttvGmCkQ" name="ivUser" typeClassname="java.lang.String"/>
        </defaultValue>
      </data>
      <data xmi:type="process:BusinessObjectData" xmi:id="_4oORQI64EeiCd4A7RChmhg" name="validacionIngresos" dataType="_WFKfNI6OEei8kvcpw0fSig" className="com.bbva.model.AutomaticProcessTask">
        <defaultValue xmi:type="expression:Expression" xmi:id="_KIf74JA_EeiNZ7jJpWh7Pw" name="init_validacionIngresos()" content="import javax.print.attribute.AttributeSetUtilities;&#xD;&#xA;import org.bonitasoft.engine.bpm.flownode.ActivityInstance;&#xD;&#xA;import com.bbva.cnmc.proxyaso.dto.aso.AsoDTO;&#xD;&#xA;import com.bbva.model.AutomaticProcessExecution;&#xD;&#xA;import com.bbva.model.AutomaticProcessTask;&#xD;&#xA;&#xD;&#xA;AutomaticProcessTask rootTask = new AutomaticProcessTask();&#xD;&#xA;rootTask.setStartDate(new Date().getTime());&#xD;&#xA;rootTask.setStatus(&quot;READY&quot;);&#xD;&#xA;rootTask.setFlowName(apiAccessor.getProcessAPI().getProcessInstance(processInstanceId).getName());&#xD;&#xA;rootTask.setUserName(contrato.userName);&#xD;&#xA;ActivityInstance tarea = apiAccessor.getProcessAPI().getActivityInstance(Long.parseLong(contrato.taskId));&#xD;&#xA;rootTask.setTask(tarea.getDisplayName());&#xD;&#xA;rootTask.setTaskId(tarea.getId());&#xD;&#xA;rootTask.setProcess(apiAccessor.getProcessAPI().getProcessInstance(tarea.getRootContainerId()).getName());&#xD;&#xA;rootTask.setProcessId(tarea.getRootContainerId());&#xD;&#xA;&#xD;&#xA;List executions = new ArrayList&lt;AutomaticProcessExecution>();&#xD;&#xA;&#xD;&#xA;//Execution of service SOI-ACH&#xD;&#xA;AutomaticProcessExecution a0 = new AutomaticProcessExecution();&#xD;&#xA;a0.setAutomaticProcessIdentifier(rootProcessInstanceId);&#xD;&#xA;a0.setAutomaticProcessName(apiAccessor.getProcessAPI().getProcessInstance(processInstanceId).getName());&#xD;&#xA;a0.setDescription(&quot;Risk Profiles Client&quot;);&#xD;&#xA;a0.setStatus(&quot;READY&quot;);&#xD;&#xA;a0.setEndpoint(urlSoi);&#xD;&#xA;a0.setDateStart(new Date().getTime());&#xD;&#xA;a0.setOperation(&quot;GET&quot;);&#xD;&#xA;executions.add(a0);&#xD;&#xA;&#xD;&#xA;//Execution of drools rules&#xD;&#xA;AutomaticProcessExecution a1 = new AutomaticProcessExecution();&#xD;&#xA;a1.setAutomaticProcessIdentifier(rootProcessInstanceId);&#xD;&#xA;a1.setAutomaticProcessName(apiAccessor.getProcessAPI().getProcessInstance(processInstanceId).getName());&#xD;&#xA;a1.setDescription(&quot;Drools&quot;);&#xD;&#xA;a1.setStatus(&quot;READY&quot;);&#xD;&#xA;a1.setEndpoint(&quot;N/A&quot;);&#xD;&#xA;a1.setDateStart(new Date().getTime());&#xD;&#xA;a1.setOperation(&quot;N/A&quot;);&#xD;&#xA;executions.add(a1);&#xD;&#xA;&#xD;&#xA;rootTask.setExecutions(executions);&#xD;&#xA;&#xD;&#xA;return rootTask;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="com.bbva.model.AutomaticProcessTask">
          <referencedElements xmi:type="expression:Expression" xmi:id="_KIf74ZA_EeiNZ7jJpWh7Pw" name="processInstanceId" content="processInstanceId" type="TYPE_ENGINE_CONSTANT" returnType="java.lang.Long"/>
          <referencedElements xmi:type="parameter:Parameter" xmi:id="_KIf74pA_EeiNZ7jJpWh7Pw" name="urlSoi" typeClassname="java.lang.String"/>
          <referencedElements xmi:type="expression:Expression" xmi:id="_KIf745A_EeiNZ7jJpWh7Pw" name="apiAccessor" content="apiAccessor" type="TYPE_ENGINE_CONSTANT" returnType="com.bonitasoft.engine.api.APIAccessor"/>
          <referencedElements xmi:type="expression:Expression" xmi:id="_KIf79pA_EeiNZ7jJpWh7Pw" name="rootProcessInstanceId" content="rootProcessInstanceId" type="TYPE_ENGINE_CONSTANT" returnType="java.lang.Long"/>
          <referencedElements xmi:type="process:ContractInput" xmi:id="_C4RiJJ_MEeiV_aNwidcLeQ" name="contrato" type="COMPLEX">
            <mapping xmi:type="process:ContractInputMapping" xmi:id="_C4SI0Z_MEeiV_aNwidcLeQ"/>
          </referencedElements>
        </defaultValue>
      </data>
      <data xmi:type="process:JavaObjectData" xmi:id="_rcorYJQ3Eeidp_SnWw0LXw" name="baseAchDTO" dataType="_WFKfMo6OEei8kvcpw0fSig" className="com.bbva.drools.dto.BaseAchDTO">
        <defaultValue xmi:type="expression:Expression" xmi:id="_7xnVwJQ3Eeidp_SnWw0LXw" name="init_()" content="import com.bbva.drools.dto.BaseAchDTO;&#xD;&#xA;&#xD;&#xA;BaseAchDTO baseAchDTO = new BaseAchDTO();&#xD;&#xA;&#xD;&#xA;return baseAchDTO;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="com.bbva.drools.dto.BaseAchDTO"/>
      </data>
      <data xmi:type="process:Data" xmi:id="_zIL7YJTzEeimyMrxtKzKVw" name="origenIngresos" dataType="_WFKfMY6OEei8kvcpw0fSig">
        <defaultValue xmi:type="expression:Expression" xmi:id="_AEj48JT5EeimyMrxtKzKVw" content=""/>
      </data>
      <confirmationTemplate xmi:type="process:AssociatedFile" xmi:id="_WFKfD46OEei8kvcpw0fSig" path="_WFKe8Y6OEei8kvcpw0fSig/html/_WFKe8Y6OEei8kvcpw0fSigconfirmation.html"/>
      <entryRedirectionURL xmi:type="expression:Expression" xmi:id="_WFKfEI6OEei8kvcpw0fSig" name="" content="" returnTypeFixed="true"/>
      <confirmationMessage xmi:type="expression:Expression" xmi:id="_WFKfEY6OEei8kvcpw0fSig" name="" content="" returnTypeFixed="true"/>
      <formMapping xmi:type="process:FormMapping" xmi:id="_WFKfEo6OEei8kvcpw0fSig">
        <targetForm xmi:type="expression:Expression" xmi:id="_JXwrMJUQEeimyMrxtKzKVw" name="" content="" type="FORM_REFERENCE_TYPE" returnTypeFixed="true"/>
      </formMapping>
      <recapPageFlowRedirectionURL xmi:type="expression:Expression" xmi:id="_WFKfFI6OEei8kvcpw0fSig" name="" content="" returnTypeFixed="true"/>
      <overviewFormMapping xmi:type="process:FormMapping" xmi:id="_WFKfFY6OEei8kvcpw0fSig">
        <targetForm xmi:type="expression:Expression" xmi:id="_WFKfFo6OEei8kvcpw0fSig" name="" content="" type="FORM_REFERENCE_TYPE" returnTypeFixed="true"/>
      </overviewFormMapping>
      <viewPageFlowRedirectionURL xmi:type="expression:Expression" xmi:id="_WFKfF46OEei8kvcpw0fSig" name="" content="" returnTypeFixed="true"/>
      <connections xmi:type="process:SequenceFlow" xmi:id="_WFKfGI6OEei8kvcpw0fSig" target="_PLYGMI6aEeiCd4A7RChmhg" source="_WFKe846OEei8kvcpw0fSig">
        <decisionTable xmi:type="decision:DecisionTable" xmi:id="_WFKfGY6OEei8kvcpw0fSig"/>
        <condition xmi:type="expression:Expression" xmi:id="_WFKfGo6OEei8kvcpw0fSig" name="" type="TYPE_CONDITION" returnType="java.lang.Boolean" returnTypeFixed="true"/>
      </connections>
      <connections xmi:type="process:SequenceFlow" xmi:id="_hGtO8JA9EeiFubttvGmCkQ" target="_i8Mw8JA9EeiFubttvGmCkQ" source="_PLYGMI6aEeiCd4A7RChmhg">
        <decisionTable xmi:type="decision:DecisionTable" xmi:id="_hGt2AJA9EeiFubttvGmCkQ"/>
        <condition xmi:type="expression:Expression" xmi:id="_hGt2AZA9EeiFubttvGmCkQ" name="" content="" type="TYPE_CONDITION" returnType="java.lang.Boolean" returnTypeFixed="true"/>
      </connections>
      <connections xmi:type="process:SequenceFlow" xmi:id="_dH7JMJTzEeimyMrxtKzKVw" target="_PVQmgI6QEeiCd4A7RChmhg" source="_i8Mw8JA9EeiFubttvGmCkQ">
        <decisionTable xmi:type="decision:DecisionTable" xmi:id="_dH7wQJTzEeimyMrxtKzKVw"/>
        <condition xmi:type="expression:Expression" xmi:id="_dH7wQZTzEeimyMrxtKzKVw" name="" content="" type="TYPE_CONDITION" returnType="java.lang.Boolean" returnTypeFixed="true"/>
      </connections>
      <actors xmi:type="process:Actor" xmi:id="_CC4KcI6QEeiCd4A7RChmhg" name="system"/>
      <parameters xmi:type="parameter:Parameter" xmi:id="_WVM0UI61EeiCd4A7RChmhg" name="urlSoi" typeClassname="java.lang.String"/>
      <parameters xmi:type="parameter:Parameter" xmi:id="_BFECEI62EeiCd4A7RChmhg" name="authenticationData" typeClassname="java.lang.String"/>
      <parameters xmi:type="parameter:Parameter" xmi:id="_B9xywI62EeiCd4A7RChmhg" name="authenticationType" typeClassname="java.lang.String"/>
      <parameters xmi:type="parameter:Parameter" xmi:id="_Cwdz8I62EeiCd4A7RChmhg" name="consumerID" typeClassname="java.lang.String"/>
      <parameters xmi:type="parameter:Parameter" xmi:id="_DjcJAI62EeiCd4A7RChmhg" name="ivTicket" typeClassname="java.lang.String"/>
      <parameters xmi:type="parameter:Parameter" xmi:id="_Ej12EI62EeiCd4A7RChmhg" name="ivUser" typeClassname="java.lang.String"/>
      <parameters xmi:type="parameter:Parameter" xmi:id="_lh7nwI62EeiCd4A7RChmhg" name="urlGrantingTicket" typeClassname="java.lang.String"/>
      <parameters xmi:type="parameter:Parameter" xmi:id="_wcIHQJDhEeiNZ7jJpWh7Pw" name="pTipoCotizante" typeClassname="java.lang.String"/>
      <contract xmi:type="process:Contract" xmi:id="_WFKfHI6OEei8kvcpw0fSig">
        <inputs xmi:type="process:ContractInput" xmi:id="_MM5KwI65EeiCd4A7RChmhg" name="contrato" type="COMPLEX">
          <mapping xmi:type="process:ContractInputMapping" xmi:id="_MM5KwY65EeiCd4A7RChmhg"/>
          <inputs xmi:type="process:ContractInput" xmi:id="_OIOPAI65EeiCd4A7RChmhg" name="taskId">
            <mapping xmi:type="process:ContractInputMapping" xmi:id="_OIOPAY65EeiCd4A7RChmhg"/>
          </inputs>
          <inputs xmi:type="process:ContractInput" xmi:id="_PrZR8I65EeiCd4A7RChmhg" name="userName">
            <mapping xmi:type="process:ContractInputMapping" xmi:id="_PrZR8Y65EeiCd4A7RChmhg"/>
          </inputs>
          <inputs xmi:type="process:ContractInput" xmi:id="_Qna1UI65EeiCd4A7RChmhg" name="cliente" type="COMPLEX">
            <mapping xmi:type="process:ContractInputMapping" xmi:id="_Qna1UY65EeiCd4A7RChmhg"/>
            <inputs xmi:type="process:ContractInput" xmi:id="_SYnGII65EeiCd4A7RChmhg" name="documentType">
              <mapping xmi:type="process:ContractInputMapping" xmi:id="_SYnGIY65EeiCd4A7RChmhg"/>
            </inputs>
            <inputs xmi:type="process:ContractInput" xmi:id="_WXxDUI65EeiCd4A7RChmhg" name="documentNumber">
              <mapping xmi:type="process:ContractInputMapping" xmi:id="_WXxDUY65EeiCd4A7RChmhg"/>
            </inputs>
            <inputs xmi:type="process:ContractInput" xmi:id="_X-meQI65EeiCd4A7RChmhg" name="firstName">
              <mapping xmi:type="process:ContractInputMapping" xmi:id="_X-meQY65EeiCd4A7RChmhg"/>
            </inputs>
            <inputs xmi:type="process:ContractInput" xmi:id="_ZtHOgI65EeiCd4A7RChmhg" name="lastName">
              <mapping xmi:type="process:ContractInputMapping" xmi:id="_ZtHOgY65EeiCd4A7RChmhg"/>
            </inputs>
            <inputs xmi:type="process:ContractInput" xmi:id="_aqhR8I65EeiCd4A7RChmhg" name="secondLastName">
              <mapping xmi:type="process:ContractInputMapping" xmi:id="_aqhR8Y65EeiCd4A7RChmhg"/>
            </inputs>
          </inputs>
        </inputs>
      </contract>
      <searchIndexes xmi:type="process:SearchIndex" xmi:id="_WFKfHY6OEei8kvcpw0fSig">
        <name xmi:type="expression:Expression" xmi:id="_WFKfHo6OEei8kvcpw0fSig" content="" returnTypeFixed="true"/>
        <value xmi:type="expression:Expression" xmi:id="_WFKfH46OEei8kvcpw0fSig" content="" returnTypeFixed="true"/>
      </searchIndexes>
      <searchIndexes xmi:type="process:SearchIndex" xmi:id="_WFKfII6OEei8kvcpw0fSig">
        <name xmi:type="expression:Expression" xmi:id="_WFKfIY6OEei8kvcpw0fSig" content="" returnTypeFixed="true"/>
        <value xmi:type="expression:Expression" xmi:id="_WFKfIo6OEei8kvcpw0fSig" content="" returnTypeFixed="true"/>
      </searchIndexes>
      <searchIndexes xmi:type="process:SearchIndex" xmi:id="_WFKfI46OEei8kvcpw0fSig">
        <name xmi:type="expression:Expression" xmi:id="_WFKfJI6OEei8kvcpw0fSig" content="" returnTypeFixed="true"/>
        <value xmi:type="expression:Expression" xmi:id="_WFKfJY6OEei8kvcpw0fSig" content="" returnTypeFixed="true"/>
      </searchIndexes>
      <searchIndexes xmi:type="process:SearchIndex" xmi:id="_WFKfJo6OEei8kvcpw0fSig">
        <name xmi:type="expression:Expression" xmi:id="_WFKfJ46OEei8kvcpw0fSig" content="" returnTypeFixed="true"/>
        <value xmi:type="expression:Expression" xmi:id="_WFKfKI6OEei8kvcpw0fSig" content="" returnTypeFixed="true"/>
      </searchIndexes>
      <searchIndexes xmi:type="process:SearchIndex" xmi:id="_WFKfKY6OEei8kvcpw0fSig">
        <name xmi:type="expression:Expression" xmi:id="_WFKfKo6OEei8kvcpw0fSig" content="" returnTypeFixed="true"/>
        <value xmi:type="expression:Expression" xmi:id="_WFKfK46OEei8kvcpw0fSig" content="" returnTypeFixed="true"/>
      </searchIndexes>
    </elements>
    <datatypes xmi:type="process:BooleanType" xmi:id="_WFKfLI6OEei8kvcpw0fSig" name="Boolean"/>
    <datatypes xmi:type="process:DateType" xmi:id="_WFKfLY6OEei8kvcpw0fSig" name="Date"/>
    <datatypes xmi:type="process:IntegerType" xmi:id="_WFKfLo6OEei8kvcpw0fSig" name="Integer"/>
    <datatypes xmi:type="process:LongType" xmi:id="_WFKfL46OEei8kvcpw0fSig" name="Long"/>
    <datatypes xmi:type="process:DoubleType" xmi:id="_WFKfMI6OEei8kvcpw0fSig" name="Double"/>
    <datatypes xmi:type="process:StringType" xmi:id="_WFKfMY6OEei8kvcpw0fSig" name="Text"/>
    <datatypes xmi:type="process:JavaType" xmi:id="_WFKfMo6OEei8kvcpw0fSig" name="Java_object"/>
    <datatypes xmi:type="process:XMLType" xmi:id="_WFKfM46OEei8kvcpw0fSig" name="XML"/>
    <datatypes xmi:type="process:BusinessObjectType" xmi:id="_WFKfNI6OEei8kvcpw0fSig" name="Business_Object"/>
  </process:MainProcess>
  <notation:Diagram xmi:id="_WFKfNY6OEei8kvcpw0fSig" type="Process" element="_WFKe8I6OEei8kvcpw0fSig" name="MiDiagrama" measurementUnit="Pixel">
    <children xmi:type="notation:Node" xmi:id="_WFKfNo6OEei8kvcpw0fSig" type="2007" element="_WFKe8Y6OEei8kvcpw0fSig">
      <children xmi:type="notation:DecorationNode" xmi:id="_WFKfN46OEei8kvcpw0fSig" type="5008" element="_WFKe8Y6OEei8kvcpw0fSig"/>
      <children xmi:type="notation:DecorationNode" xmi:id="_WFKfOI6OEei8kvcpw0fSig" type="7001" element="_WFKe8Y6OEei8kvcpw0fSig">
        <children xmi:type="notation:Node" xmi:id="_WFKfOY6OEei8kvcpw0fSig" type="3007" element="_WFKe8o6OEei8kvcpw0fSig">
          <children xmi:type="notation:DecorationNode" xmi:id="_WFKfOo6OEei8kvcpw0fSig" type="5007" element="_WFKe8o6OEei8kvcpw0fSig"/>
          <children xmi:type="notation:DecorationNode" xmi:id="_WFKfO46OEei8kvcpw0fSig" type="7002" element="_WFKe8o6OEei8kvcpw0fSig">
            <children xmi:type="notation:Shape" xmi:id="_WFKfP46OEei8kvcpw0fSig" type="3002" element="_WFKe846OEei8kvcpw0fSig" fontName="Segoe UI">
              <children xmi:type="notation:DecorationNode" xmi:id="_WFKfQI6OEei8kvcpw0fSig" type="5024" element="_WFKe846OEei8kvcpw0fSig">
                <layoutConstraint xmi:type="notation:Location" xmi:id="_WFKfQY6OEei8kvcpw0fSig" y="5"/>
              </children>
              <layoutConstraint xmi:type="notation:Bounds" xmi:id="_WFKfQo6OEei8kvcpw0fSig" x="43" y="116"/>
            </children>
            <children xmi:type="notation:Shape" xmi:id="_PVcMsI6QEeiCd4A7RChmhg" type="3003" element="_PVQmgI6QEeiCd4A7RChmhg" fontName="Segoe UI">
              <children xmi:type="notation:DecorationNode" xmi:id="_PVczwI6QEeiCd4A7RChmhg" type="5025" element="_PVQmgI6QEeiCd4A7RChmhg">
                <layoutConstraint xmi:type="notation:Location" xmi:id="_PVczwY6QEeiCd4A7RChmhg" y="5"/>
              </children>
              <layoutConstraint xmi:type="notation:Bounds" xmi:id="_PVcMsY6QEeiCd4A7RChmhg" x="480" y="116"/>
            </children>
            <children xmi:type="notation:Shape" xmi:id="_PLfa8I6aEeiCd4A7RChmhg" type="3027" element="_PLYGMI6aEeiCd4A7RChmhg" fontName="Segoe UI" fillColor="14334392" lineColor="10710316">
              <children xmi:type="notation:DecorationNode" xmi:id="_PLgpEI6aEeiCd4A7RChmhg" type="5017" element="_PLYGMI6aEeiCd4A7RChmhg"/>
              <layoutConstraint xmi:type="notation:Bounds" xmi:id="_PLgCAI6aEeiCd4A7RChmhg" x="119" y="106" width="100" height="50"/>
            </children>
            <children xmi:type="notation:Shape" xmi:id="_i8OmIJA9EeiFubttvGmCkQ" type="3027" element="_i8Mw8JA9EeiFubttvGmCkQ" fontName="Segoe UI" fillColor="14334392" lineColor="10710316">
              <children xmi:type="notation:DecorationNode" xmi:id="_i8PNMJA9EeiFubttvGmCkQ" type="5017" element="_i8Mw8JA9EeiFubttvGmCkQ"/>
              <layoutConstraint xmi:type="notation:Bounds" xmi:id="_i8OmIZA9EeiFubttvGmCkQ" x="271" y="99" width="128" height="64"/>
            </children>
          </children>
          <styles xmi:type="notation:DescriptionStyle" xmi:id="_WFKfQ46OEei8kvcpw0fSig"/>
          <styles xmi:type="notation:FontStyle" xmi:id="_WFKfRI6OEei8kvcpw0fSig" fontName="Segoe UI"/>
          <styles xmi:type="notation:LineStyle" xmi:id="_WFKfRY6OEei8kvcpw0fSig"/>
          <styles xmi:type="notation:FillStyle" xmi:id="_WFKfRo6OEei8kvcpw0fSig"/>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="_WFKfR46OEei8kvcpw0fSig"/>
        </children>
      </children>
      <styles xmi:type="notation:DescriptionStyle" xmi:id="_WFKfSI6OEei8kvcpw0fSig"/>
      <styles xmi:type="notation:FontStyle" xmi:id="_WFKfSY6OEei8kvcpw0fSig" fontName="Segoe UI"/>
      <styles xmi:type="notation:LineStyle" xmi:id="_WFKfSo6OEei8kvcpw0fSig"/>
      <styles xmi:type="notation:FillStyle" xmi:id="_WFKfS46OEei8kvcpw0fSig"/>
      <layoutConstraint xmi:type="notation:Bounds" xmi:id="_WFKfTI6OEei8kvcpw0fSig" width="1126" height="250"/>
    </children>
    <styles xmi:type="notation:DiagramStyle" xmi:id="_WFKfTY6OEei8kvcpw0fSig"/>
    <edges xmi:type="notation:Connector" xmi:id="_WFKfTo6OEei8kvcpw0fSig" type="4001" element="_WFKfGI6OEei8kvcpw0fSig" source="_WFKfP46OEei8kvcpw0fSig" target="_PLfa8I6aEeiCd4A7RChmhg" roundedBendpointsRadius="10" routing="Rectilinear">
      <children xmi:type="notation:DecorationNode" xmi:id="_WFKfT46OEei8kvcpw0fSig" type="6001" element="_WFKfGI6OEei8kvcpw0fSig">
        <layoutConstraint xmi:type="notation:Location" xmi:id="_WFKfUI6OEei8kvcpw0fSig" y="-10"/>
      </children>
      <styles xmi:type="notation:FontStyle" xmi:id="_WFKfUY6OEei8kvcpw0fSig" fontName="Segoe UI"/>
      <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="_WFKfUo6OEei8kvcpw0fSig" points="[0, 0, 0, 0]$[0, 0, 0, 0]"/>
    </edges>
    <edges xmi:type="notation:Connector" xmi:id="_hGvEIJA9EeiFubttvGmCkQ" type="4001" element="_hGtO8JA9EeiFubttvGmCkQ" source="_PLfa8I6aEeiCd4A7RChmhg" target="_i8OmIJA9EeiFubttvGmCkQ" roundedBendpointsRadius="10" routing="Rectilinear">
      <children xmi:type="notation:DecorationNode" xmi:id="_hGwSQJA9EeiFubttvGmCkQ" type="6001" element="_hGtO8JA9EeiFubttvGmCkQ">
        <layoutConstraint xmi:type="notation:Location" xmi:id="_hGwSQZA9EeiFubttvGmCkQ" y="-10"/>
      </children>
      <styles xmi:type="notation:FontStyle" xmi:id="_hGvEIZA9EeiFubttvGmCkQ" fontName="Segoe UI"/>
      <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="_hGvEIpA9EeiFubttvGmCkQ" points="[0, -6, -73, -9]$[52, -6, -21, -9]"/>
      <sourceAnchor xmi:type="notation:IdentityAnchor" xmi:id="_hGz8oJA9EeiFubttvGmCkQ" id="(1.0,0.6)"/>
      <targetAnchor xmi:type="notation:IdentityAnchor" xmi:id="_hGz8oZA9EeiFubttvGmCkQ" id="(0.17,0.64)"/>
    </edges>
    <edges xmi:type="notation:Connector" xmi:id="_dH7wQpTzEeimyMrxtKzKVw" type="4001" element="_dH7JMJTzEeimyMrxtKzKVw" source="_i8OmIJA9EeiFubttvGmCkQ" target="_PVcMsI6QEeiCd4A7RChmhg" roundedBendpointsRadius="10" routing="Rectilinear">
      <children xmi:type="notation:DecorationNode" xmi:id="_dH8XUJTzEeimyMrxtKzKVw" type="6001" element="_dH7JMJTzEeimyMrxtKzKVw">
        <layoutConstraint xmi:type="notation:Location" xmi:id="_dH8XUZTzEeimyMrxtKzKVw" y="-10"/>
      </children>
      <styles xmi:type="notation:FontStyle" xmi:id="_dH7wQ5TzEeimyMrxtKzKVw" fontName="Segoe UI"/>
      <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="_dH7wRJTzEeimyMrxtKzKVw" points="[0, -4, -84, -6]$[87, -13, 3, -15]"/>
      <sourceAnchor xmi:type="notation:IdentityAnchor" xmi:id="_dH9lcJTzEeimyMrxtKzKVw" id="(1.0,0.4714285714285714)"/>
    </edges>
  </notation:Diagram>
</xmi:XMI>

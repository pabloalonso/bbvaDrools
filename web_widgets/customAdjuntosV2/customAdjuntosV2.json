{"designerVersion":"1.2.19","id":"customAdjuntosV2","name":"AdjuntosV2","lastUpdate":1527605553136,"template":"\r\n<!-- Panel para mostrar errores globales -->\r\n<div class=\"panel panel-danger\" ng-if=\"properties.hasErrors\">\r\n    <div class=\"panel-heading\">{{errorMessage}}</div>\r\n</div>\r\n\r\n<div>\r\n    <label class=\"control-label\">{{properties.label}}</label>    \r\n</div>\r\n\r\n<div class=\"files-container\" ng-if=\"properties.filesQuantity == 1\">\r\n   <div class=\"input-group\">\r\n        <input type=\"text\" class=\"form-control\" readonly ng-value=\"selectedFiles[0].name\">\r\n        <span class=\"input-group-addon attach-blue\" ng-if=\"!selectedFiles[0]\" ngf-select=\"selectFiles($files, $invalidFiles)\" accept=\"{{properties.accept}}\" ngf-max-size=\"{{properties.maxSize}}MB\"><span class=\"glyphicon glyphicon-paperclip\"></span></span>\r\n        \r\n        <span class=\"input-group-addon\" ng-if=\"!properties.readOnly && selectedFiles[0].progress && selectedFiles[0].progress < 100\">{{selectedFiles[0].progress}}%</span>\r\n        <span class=\"input-group-addon attach-blue\" ng-click=\"upload(selectedFiles[0])\" ng-if=\"!properties.readOnly && selectedFiles[0] && !selectedFiles[0].progress\" ><span class=\"glyphicon glyphicon-upload\"></span></span>\r\n        <span class=\"input-group-addon attach-green\" ng-click=\"download(selectedFiles[0])\" ng-if=\"selectedFiles[0].progress == 100\"><span class=\"glyphicon glyphicon-download\"></span></span>\r\n        <span class=\"input-group-addon attach-yellow\" ng-click=\"abort(selectedFiles[0])\" ng-if=\"!properties.readOnly && selectedFiles[0].progress > 0 && selectedFiles[0].progress < 100\"><span class=\"glyphicon glyphicon-ban-circle\"></span></span>\r\n        <span class=\"input-group-addon attach-red\" ng-click=\"remove(selectedFiles[0])\" ng-if=\"!properties.readOnly && selectedFiles[0] && (!selectedFiles[0].progress || selectedFiles[0].progress == 100)\"><span class=\"glyphicon glyphicon-remove\"></span></span>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"files-container\" ng-if=\"properties.filesQuantity > 1\">\r\n    \r\n    <!-- Archivos precargados -->\r\n    <div class=\"files-list\" ng-if=\"properties.preloadIds.length > 0\" ng-init=\"preloadFiles()\">\r\n        <div class=\"file-item\" ng-repeat=\"f in preloadedFiles\">\r\n            <div class=\"detail row\">\r\n                <div class=\"description col-md-10\">\r\n                    <div class=\"name\">{{f.fileOriginalName}}</div> \r\n                    <div class=\"autor\">Creado por: {{f.createdBy}} el dia {{f.createdDate | date : 'dd-MM-yyyy HH:mm:ss'}}</div>\r\n                    <div class=\"size\">Tamaño: {{getFileSize(f)}}</div>\r\n                </div>\r\n                <div class=\"actions col-md-2 text-right\">\r\n                    <button type=\"button\" class=\"btn btn-success\" ng-click=\"download(f)\"><span class=\"glyphicon glyphicon-download\"></span></button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    \r\n    <!-- Archivos nuevos -->\r\n    <div class=\"global-actions\" ng-if=\"!properties.readOnly\">\r\n        <button type=\"button\" class=\"btn btn-success\" ngf-select=\"selectFiles($files, $invalidFiles)\" multiple accept=\"{{properties.accept}}\" ngf-max-size=\"{{properties.maxSize}}MB\"><span class=\"glyphicon glyphicon-plus\"></span> Agregar</button>\r\n    </div>\r\n    \r\n    <div class=\"files-list\" style=\"margin-top: 10px;\" ng-if=\"selectedFiles.length > 0 && !properties.readOnly\">\r\n        <div class=\"file-item\" ng-repeat=\"f in selectedFiles\">\r\n            <div class=\"detail row\">\r\n                <div class=\"description col-md-10\">\r\n                    <div class=\"name\">{{f.fileName ? f.fileName : f.name}}</div> \r\n                    <div class=\"autor\">Creado por: {{properties.createdBy}}</div>\r\n                    <div class=\"size\">Tamaño: {{getFileSize(f)}}</div>\r\n                </div>\r\n                <div class=\"actions col-md-2 text-right\">\r\n                    <button type=\"button\" class=\"btn btn-success\" ng-click=\"download(f)\" ng-if=\"!isBuzy && f.progress == 100\"><span class=\"glyphicon glyphicon-download\"></span></button>\r\n                    <button type=\"button\" class=\"btn btn-primary\" ng-click=\"upload(f)\" ng-if=\"!isBuzy && !f.progress || f.progress < 100\"><span class=\"glyphicon glyphicon-upload\"></span></button>            \r\n                    <button type=\"button\" class=\"btn btn-warning\" ng-click=\"abort(f)\" ng-if=\"f.progress > 0 && f.progress < 100\"><span class=\"glyphicon glyphicon-ban-circle\"></span></button>            \r\n                    <button type=\"button\" class=\"btn btn-danger\" ng-click=\"remove(f)\"><span class=\"glyphicon glyphicon-remove\"></span></button>            \r\n                </div>\r\n            </div>\r\n            \r\n            <div class=\"progress\" ng-show=\"f.progress >= 0\">\r\n                <div style=\"width:{{f.progress}}%\" ng-bind=\"f.progress + '%'\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","controller":"\nfunction ($scope, $filter, $timeout, $location, $http, Upload) {\n    \n    $scope.totalMaxSize = 31457280 // 30MB\n    $scope.totalFilesSize = 0;\n    \n    $scope.$watch(\"properties.targetUrl\", function(newValue, oldValue) {\n        $scope.preloadFiles();\n    });\n    \n    $scope.$watch(\"properties.taskId\", function(newValue, oldValue) {\n        $scope.init();\n    });\n    \n    $scope.init = function() {\n        if($scope.properties.taskId) {\n            $http.get('../API/bpm/task/' + $scope.properties.taskId).then(function(response) {\n                if(response.data) {\n                    $scope.caseId = response.data.caseId;\n                    $scope.activityName = response.data.name;\n                    \n                    $http.get('../API/bpm/process/' + response.data.processId).then(function(response) {   \n                        if(response.data) {\n                            $scope.processName = response.data.name;\n                            $scope.processVersion = response.data.version;\n                        }\n                    });\n                }\n            });\n        }\n    }\n    \n    // Seleccionar los archivos\n    $scope.selectFiles = function(files, errFiles) {\n        if(!$scope.selectedFiles) {\n            $scope.selectedFiles = new Array();\n        }\n        \n        if($scope.properties.filesQuantity) {\n            if($scope.properties.filesQuantity < (files.length + $scope.selectedFiles.length)) {\n                alert(\"Solo puede seleccionar hasta \" + $scope.properties.filesQuantity + \" archivos\");\n                return false;\n            }\n        }\n        \n        for(var i = 0; i < files.length; i++) {\n            $scope.selectedFiles.push(files[i]); \n            \n            // Agrego el tamanio del archivo nuevo\n            $scope.updateTotalSize($scope.selectedFiles[i].size);\n        }\n        \n        if(errFiles && errFiles.length > 0) {\n            var errString = \"\";\n            for(var i = 0; i < errFiles.length; i++) {\n                if(errFiles[i].$errorMessages.maxSize) {\n                    if(errString.length > 0) {\n                        errString += \"\\n\";\n                    }\n                    errString += \" - El archivo \" + errFiles[i].name + \" supera el tamaño permitido de \" + errFiles[i].$errorParam\n                }\n            }\n            \n            if(errString.length > 0) {\n                alert(errString);\n            }\n        }\n    }\n    \n    // Recupera los archivos del caso\n    $scope.preloadFiles = function() {\n        if($scope.properties.targetUrl && $scope.properties.preloadIds && $scope.properties.preloadIds.length > 0) {\n            $http.get($scope.properties.targetUrl + \"/findByIds?ids=\" + $scope.getIdsString($scope.properties.preloadIds)).then(function(response) {\n                $scope.preloadedFiles = response.data;\n            }, function() {\n                alert(\"Error recuperando los archivos\");\n            });\n        }\n    }\n    \n    $scope.getIdsString = function(idsArray) {\n        var idsString = \"\";\n        \n        for(var i = 0; i< idsArray.length; i++) {\n            if(idsString.length > 0) {\n                idsString += \",\";\n            }\n            \n            idsString += idsArray[i];\n        }\n        \n        return idsString;\n    }\n    \n    // Subir un archivo\n    $scope.upload = function(file) {\n        \n        $scope.isBuzy = true;\n        \n        if($scope.properties.taskId) {\n            file.upload = Upload.upload({\n                url: $scope.properties.targetUrl + \"/upload\",\n                data: {\n                    processName: $scope.processName,\n                    processVersion: $scope.processVersion,\n                    caseId: $scope.caseId,\n                    activityName: $scope.activityName,\n                    activityId: $scope.properties.taskId,\n                    createdBy: $scope.properties.createdBy,\n                    type: $scope.properties.type,\n                    file: file\n                    \n                }\n            });    \n        } else {\n            file.upload = Upload.upload({\n                url: $scope.properties.targetUrl + \"/upload\",\n                data: {\n                    createdBy: $scope.properties.createdBy,\n                    type: $scope.properties.type,\n                    file: file\n                }\n            });\n        }\n        \n        file.upload.then(function (response) {\n            if(!$scope.properties.selectedFiles) {\n                $scope.properties.selectedFiles = new Array();\n            }\n            \n            $scope.properties.selectedFiles.push(response.data);\n            file.id = response.data;\n            \n            $scope.isBuzy = false;\n        }, function (response) {\n            if (response.status > 0) {\n                $scope.errorMsg = response.status + ': ' + response.data;\n            }\n            \n            $scope.isBuzy = false;\n        }, function (evt) {\n            file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));\n        });\n    }\n    \n    // Descargar un archivo\n    $scope.downloadOld = function(file) {\n        var url = $scope.properties.targetUrl + \"/download/\" + file.id;\n        window.location = url;\n    }\n    \n    $scope.download = function(file) {\n        $scope.isBuzy = true;\n        \n        $.ajax({\n            url: $scope.properties.targetUrl + \"/download/\" + file.id,\n            method: 'GET',\n            xhrFields: {\n                responseType: 'blob'\n            },\n            success: function (data) {\n                if(data) {\n                    var a = document.createElement('a');\n                    var url = window.URL.createObjectURL(data);\n                    a.href = url;\n                    a.download = file.name;\n                    a.click();\n                    window.URL.revokeObjectURL(url);\n                }\n                \n                $timeout(function(){\n                    $scope.$apply(function() {\n                        $scope.isBuzy = false;    \n                    })\n                }, 0);\n            }\n        }); \n    }\n    \n    // Aborta la subida de un archivo\n    $scope.abort = function(file) {\n        file.upload.abort();\n    }\n    \n    $scope.remove = function(file) {\n        for(var i = 0; i < $scope.selectedFiles.length; i++) {\n            if($scope.selectedFiles[i].id == file.id) {\n                \n                // Quito el tamanio del archivo eliminado\n                $scope.updateTotalSize($scope.selectedFiles[i].size * -1);\n                \n                $scope.selectedFiles.splice(i, 1);\n                $scope.properties.selectedFiles.splice(i, 1);\n                break;\n            }\n        }\n    }\n    \n    // Retorna el tamaño del archivo en la unidad mas legible\n    $scope.getFileSize = function(file) {\n        if(file && (file.size || file.fileSize)) {\n            return $scope.formatSize(file.fileSize ? file.fileSize : file.size); \n        }\n        \n        return -1;\n    }\n    \n    $scope.formatSize = function(sizeInBytes) {\n        var size = sizeInBytes / 1024; \n        var unit = \"KB\";\n        \n        if(size > 1024) { // MB\n            size = size / 1024;\n            unit = \"MB\";\n        }\n        \n        return $filter(\"number\")(size, 2) + \" \" + unit;\n    }\n    \n    $scope.updateTotalSize = function(addedSize) {\n        \n        // Agrego el tamaño indicado\n        $scope.totalFilesSize += addedSize;\n        if($scope.totalFilesSize > $scope.totalMaxSize) { // Si todos los archivos superan los 30Mb seteo el flag\n            $scope.errorMessage = 'El tamaño total no puede superar los 30MB';\n            $scope.properties.hasErrors = true;\n        } else {\n            delete $scope.errorMessage;\n            $scope.properties.hasErrors = false;\n        }\n    }\n}","custom":true,"properties":[{"label":"URL Destino","name":"targetUrl","type":"text","bond":"expression"},{"label":"Id tarea","name":"taskId","type":"text","bond":"expression"},{"label":"Archivos soportados","name":"accept","type":"text","bond":"expression"},{"label":"Tamaño máximo por archivo (MB)","name":"maxSize","type":"integer","bond":"expression"},{"label":"Archivos seleccionados","name":"selectedFiles","type":"text","bond":"variable"},{"label":"Tipo de documento","name":"type","type":"text","bond":"expression"},{"label":"Archivos a precargar (Ids)","name":"preloadIds","type":"collection","bond":"expression"},{"label":"Usuario de creación","name":"createdBy","type":"text","bond":"expression"},{"label":"Solo lectura","name":"readOnly","type":"boolean","bond":"expression"},{"label":"Cantidad de archivos","name":"filesQuantity","type":"integer","bond":"expression"},{"label":"Etiqueta","name":"label","type":"text","bond":"expression"},{"label":"Tiene errores","name":"hasErrors","help":"Indica si el widget tiene errores","type":"text","bond":"variable"}],"assets":[{"id":"9bdae5aa-47d6-45ab-9285-b18306c1cd6c","name":"ng-file-upload.min.js","type":"js","order":12,"external":false},{"id":"83a972bd-1d19-49ec-ad2f-4e95fd6c6471","name":"ng-file-upload-shim.min.js","type":"js","order":9,"external":false},{"id":"4103bb4e-a01b-458b-becb-1a18c49a86ac","name":"AdjuntosStyles.css","type":"css","order":17,"external":false},{"id":"df43d4dc-65c7-4733-a72e-210cac46e76f","name":"jquery-3.1.1.min.js","type":"js","order":7,"external":false}],"requiredModules":["ngFileUpload"],"type":"widget"}
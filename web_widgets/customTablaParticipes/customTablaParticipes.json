{"designerVersion":"1.4.26","id":"customTablaParticipes","name":"TablaParticipes","lastUpdate":1532727848182,"template":"<div class=\"table-responsive\">\r\n    <table bonitable\r\n           sort-options=\"ctrl.sortOptions\"\r\n           on-sort=\"ctrl.sortHandler()\"\r\n           class=\"table table-hover\" ng-class=\"{'table-hover': ctrl.isSelectable()}\">\r\n        <thead class=\"subtitulo\">\r\n            <tr>\r\n                <th colspan=\"{{ properties.headers.length + 1 }}\">\r\n                    \r\n                    <!--\r\n                    <div class=\"bo-TableSettings pull-right\" dropdown>\r\n                          <button type=\"button\"\r\n                            ng-disabled=\"ctrl.loading\"\r\n                            ng-if=\"properties.type === 'Bonita API'\"\r\n                            ng-click=\"ctrl.refreshAPIURL()\"\r\n                            class=\"btn btn-primary\">\r\n                            <span ng-show=\"ctrl.loading\">\r\n                                <i class=\"glyphicon glyphicon-refresh spinning\"></i>\r\n                            </span>\r\n                            <span ng-show=\"!ctrl.loading\">\r\n                                <i class=\"glyphicon glyphicon-refresh\"></i>\r\n                            </span>\r\n                          </button>\r\n                          \r\n                          <select\r\n                                class=\"dropdown-toggle btn btn-primary \"\r\n                                ng-model=\"ctrl.pageSize\"\r\n                                ng-disabled=\"ctrl.loading\"\r\n                                ng-options=\"option as option for option in properties.pageSizes\">\r\n                          </select>\r\n                          <button dropdown-toggle type=\"button\"\r\n                            class=\"btn btn-primary bo-Settings dropdown-toggle navbar\"\r\n                            ng-disabled=\"ctrl.results.length === 0\"\r\n                            aria-labelledby=\"aria-tablesettings\">\r\n                            <i class=\"glyphicon glyphicon-cog\"></i>\r\n                          </button>\r\n                          <div class=\"bo-TableSettings-content dropdown-menu pull-right\" role=\"menu\" aria-labelledby=\"aria-tablesettings\">\r\n                            <ul class=\"bo-TableSettings-columns bo-Text-disableSelection\" as-sortable=\"sortableOptions\" ng-model=\"ctrl.columns\">\r\n                              <li  ng-repeat=\"field in ctrl.columns\" as-sortable-item>\r\n                                  <div as-sortable-item-handle ng>\r\n                                      <label\r\n                                        class=\"bo-TableSettings-column\"\r\n                                        title=\"{{((field.visible ? 'Hide' : 'Show') +' '+ field['name']) | translate}}\"\r\n                                        ng-click=\"$event.stopPropagation()\">\r\n                                        <span class=\"glyphicon glyphicon-align-justify grabHover\"></span>\r\n                                        <span class=\"glyphicon glyphicon-align-justify grabHover\"></span>\r\n                                        <input type=\"checkbox\" ng-model=\"field['visible']\" ng-change=\"ctrl.updateVisibility({field:field})\">\r\n                                        {{::field['name']}}\r\n                                      </label>\r\n                                  </div>\r\n                              </li>\r\n                            </ul>\r\n                          </div>\r\n                    </div>\r\n                    -->\r\n                </th>\r\n            </tr>\r\n            <tr>\r\n                <th ng-repeat=\"header in properties.headers\" ng-if=\"ctrl.isVisible($index)\">\r\n                    <div ng-if=\"ctrl.isColumnSortable($index)\" bo-sorter=\"{{properties.columnsKey[$index]}}\">\r\n                            {{ header | uiTranslate }}\r\n                    </div>\r\n                    <div ng-if=\"!ctrl.isColumnSortable($index)\">\r\n                        {{ header | uiTranslate }}\r\n                    </div>\r\n                </th>\r\n                <th ng-if=\"ctrl.hasActions()\" data-noresize=\"\" class=\"\">{{properties.actionsTitle}}</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody ng-if=\"ctrl.hasMultiColumns()\">\r\n        <tr ng-repeat=\"row in ctrl.results\" ng-click=\"ctrl.selectRowHandler(row)\"\r\n            ng-class=\"{'info': (row === properties.selectedRow || (properties.highlightedRows && properties.highlightedRowsProperty && properties.highlightedRows.includes(row[properties.highlightedRowsProperty])))}\">\r\n            <td ng-repeat=\"column in properties.columnsKey track by $index\" ng-if=\"ctrl.isVisible($index)\">\r\n                {{ $eval(column, row) | uiTranslate }}\r\n            </td>\r\n            <td style=\"width:15%\" ng-if=\"ctrl.hasActions()\" class=\"application-actions\">\r\n                <a ng-repeat=\"action in properties.actions track by $index\"\r\n                    ng-if=\"!action.disabled(row)\"\r\n                    href=\"{{action.href(row)}}\" \r\n                    target=\"{{action.target(row)}}\" \r\n                    style=\"text-decoration:none \">\r\n                    <button\r\n                        class=\"{{action.glyphicon}} btn-action-{{action.name}}\"\r\n                        aria-label=\"{{action.name}}\"\r\n                        title=\"{{action.name}}\"\r\n                        ng-click=\"action.handler(row)\">{{action.tag}}\r\n                    </button>\r\n                </a>\r\n            </td>\r\n        </tr>\r\n        </tbody>\r\n        <tbody ng-if=\"!ctrl.hasMultiColumns()\">\r\n        <tr ng-repeat=\"row in ctrl.results\" ng-click=\"ctrl.selectRowHandler(row)\"\r\n            ng-class=\"{'info': row === properties.selectedRow}\">\r\n            <td>  {{ row | uiTranslate }}</td>\r\n            <td ng-if=\"ctrl.hasActions()\" class=\"application-actions\">\r\n                <button ng-repeat=\"action in properties.actions track by $index\"\r\n                        class=\"{{action.glyphicon}} btn-action-{{action.name}}\"\r\n                        aria-label=\"{{action.name}}\"\r\n                        title=\"{{action.name}}\"\r\n                        ng-click=\"action.handler(row)\">{{action.tag}}\r\n                </button>\r\n            </td>\r\n        </tr>\r\n        </tbody>\r\n    </table>\r\n    <pagination ng-if=\"ctrl.pagination.total > ctrl.pageSize\" total-items=\"ctrl.pagination.total\" items-per-page=\"ctrl.pageSize\" direction-links=\"false\" boundary-links=\"false\"\r\n                ng-model=\"ctrl.pagination.currentPage\" ng-change=\"ctrl.paginationHandler()\"></pagination>\r\n</div>\r\n","icon":"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 20'><g><path fill='#868695' d='M36,15v2h11v-2H36z M40,10v2h7v-2H40z M11,10v2h14v-2H11z M3,10v2h3v-2H3z M11,15v2h17v-2H11z M3,15v2h3 v-2H3z'/><path fill='#424251' d='M1,19V1h48v18H1z M0,0v20h50V0H0z'/><path fill='#A7A8B7' d='M1,7v1h7v11h1V8h22v11h1V8h17V7H32V1h-1v6H9V1H8v6H1z'/><path fill='none' stroke='#424251' d='M35,3h12v2H35V3z M11,3h13v2H11V3z M3,3h3v2H3V3z'/></g></svg>","controller":"function CustomDataTableWithSettingsEmptyAndActionsCtrl($scope, $http, $log, $filter, $injector, $interpolate) {\n\n  var vm = this;\n  \n  this.pageSize = $scope.properties.defaultPageSize ? $scope.properties.pageSizes.find(function(item) { return item + \"\" === \"\" + $scope.properties.defaultPageSize }) : $scope.properties.pageSizes[0];\n  \n  this.loading = true;\n  \n  Object.defineProperty(vm, 'jsonData', {\n    'get': function () {\n      //undefined for filter expression allows to bypass the null value issue that\n      //filters everything\n      var data = $filter('filter')(this.data || [], $scope.properties.filter || undefined);\n      return $filter('orderBy')(data, vm.sortOptions.property, vm.sortOptions.direction);\n    },\n    'set': function (data) {\n      this.data = data;\n    }\n  });\n\n  this.sortOptions = {\n    property: ($scope.properties.defaultSortColumn ? $scope.properties.defaultSortColumn : ($scope.properties.sortColumns || [])[0]),\n    direction: ($scope.properties.defaultSortOrder ? $scope.properties.defaultSortOrder === 'DESC' : false)\n  };\n  \n  this.pagination = {\n    currentPage: 1,\n    total: 0\n  };\n  \n  this.columns = $scope.properties.headers.map(function(header) {\n      return {\n        name: $interpolate('{{ header | uiTranslate }}')({ header: header }),\n        visible: true\n      };\n  });\n\n  /**\n   * helper methods\n   */\n  this.hasMultiColumns = function () {\n    return Array.isArray($scope.properties.columnsKey);\n  };\n\n  this.isSelectable = function () {\n    return $scope.properties.isBound('selectedRow');\n  };\n\n  this.hasActions = function () {\n    return $scope.properties.isBound('actions');\n  };\n\n  /**\n   * Create a request object following $http(request)\n   * @return {Object} a request Object\n   */\n  this.createRequest = function () {\n    var params = {\n      c: this.pageSize,\n      p: this.pagination.currentPage - 1 || 0,\n      s: $scope.properties.filter\n    };\n\n    if (this.sortOptions.property) {\n      params.o = this.sortOptions.property + ' ' + (this.sortOptions.direction ? 'DESC' : 'ASC');\n    }\n    return {\n      url: this.removeHandledParams($scope.properties.apiUrl),\n      transformResponse: $http.defaults.transformResponse.concat(transformResponse),\n      params: angular.extend({}, $scope.properties.params || {}, params)\n    };\n  };\n\n  this.removeHandledParams = function(url) {\n    return ['c', 'p'].reduce(\n      function(acc, param) {\n        //we cannot use pbDataTable because the widget build (probably mustache) replace it\n        // with the widget name...\n        return acc.replace(new RegExp('(&' + param + '=[^&#]*([&#])?)', 'g'), '$2').replace(new RegExp('[?]' + param + '=[^&#]*&?', 'g'), '?');\n      },\n      url || '');\n  };\n\n  this.refreshAPIURL = function () {\n    $scope.properties.refreshTimestamp = new Date();\n    $scope.properties.selectedRow = undefined;\n  }\n\n  /**\n   *  Fire request and update results and pagination\n   */\n  this.updateResultsFromAPI = function () {\n    if($scope.properties.apiUrl) {\n      $http(vm.createRequest())\n        .then(function (response) {\n          vm.results = response.data.results;\n          vm.pagination = response.data.pagination;\n          vm.updateIsEmpty();\n          vm.loading = false;\n        })\n        .catch(function (error) {\n          vm.updateIsEmpty();\n          vm.loading = false;\n          $log.error(error);\n        });\n    }\n  };\n  \n  this.updateIsEmpty = function() {\n    if(Array.isArray(vm.results) && vm.results.length > 0) {\n        $scope.properties.isEmpty = false;\n    } else {\n        $scope.properties.isEmpty = true;\n    }\n  };\n\n  this.updateResultsFromJson = function () {\n    var start = (vm.pagination.currentPage - 1) * vm.pageSize;\n    var end = vm.pagination.currentPage * vm.pageSize;\n    vm.results = vm.jsonData.slice(start, end);\n    vm.updateIsEmpty();\n    vm.loading = false;\n  };\n\n\n  this.sortHandler = function () {\n    this.updateResults();\n  };\n\n  this.paginationHandler = function () {\n    this.updateResults();\n  };\n\n  this.selectRowHandler = function (row) {\n    if (this.isSelectable()) {\n      $scope.properties.selectedRow = row;\n    }\n  };\n\n  this.isColumnSortable = function(index) {\n    return $scope.properties.type === 'Variable' ||\n      (angular.isArray($scope.properties.sortColumns) &&\n        $scope.properties.sortColumns.indexOf($scope.properties.columnsKey[index]) > -1);\n  };\n\n  function transformResponse(data, header) {\n    return {\n      results: data,\n      pagination: parseContentRange(header('Content-Range'))\n    };\n  }\n\n  /**\n   * helper method which extract pagination data from Content-range HTTP header\n   * @param  {String} strContentRange Content-Range value\n   * @return {Object}                 object containing pagination\n   */\n  function parseContentRange(strContentRange) {\n    if (strContentRange === null) {\n      return {};\n    }\n    var arrayContentRange = strContentRange.split('/');\n    var arrayIndexNumPerPage = arrayContentRange[0].split('-');\n    return {\n      total: parseInt(arrayContentRange[1], 10),\n      currentPage: parseInt(arrayIndexNumPerPage[0], 10) + 1\n    };\n  }\n\n  vm.updateResults = function () {\n    vm.loading = true;\n      \n    if ($scope.properties.type === 'Variable') {\n      vm.updateResultsFromJson();\n    } else {\n      vm.updateResultsFromAPI();\n    }\n  };\n\n  //watchGroup does not support object equality so we use another way to monitor all at once\n  $scope.$watch('[properties.refreshTimestamp, ctrl.pageSize, properties.apiUrl, properties.filter, properties.params]', resetPaginationAndUpdateResults, true);\n\n  function resetPaginationAndUpdateResults() {\n    vm.pagination = {\n      currentPage: 1,\n      total: vm.jsonData.length\n    };\n    vm.updateResults();\n  }\n\n  $scope.$watchCollection('properties.content', function (data) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n    vm.jsonData = data;\n    vm.pagination = {\n      currentPage: 1,\n      total: data.length\n    };\n    vm.updateResults();\n  });\n  \n  this.isVisible = function(index) {\n    return angular.isArray(vm.columns) && vm.columns[index].visible;\n  };\n  \n}\n","description":"Table with pagination and filtering capabilities","custom":true,"order":16,"properties":[{"label":"Headers","name":"headers","caption":"Comma-separated list","help":"If you specify an expression, the result must be an array of strings","type":"collection","defaultValue":["Id","Name","Description","Date"],"bond":"expression"},{"label":"Data source","name":"type","help":"Variable for frontend paging and ordering or Bonita REST API URL for backend paging and ordering","type":"choice","defaultValue":"Bonita API","choiceValues":["Variable","Bonita API"],"bond":"constant"},{"label":"URL","name":"apiUrl","caption":"A Bonita BPM REST API URL","showFor":"properties.type.value === 'Bonita API'","type":"text","defaultValue":"../API/","bond":"expression"},{"label":"API request parameters","name":"params","help":"Additional request parameters added to the query string","showFor":"properties.type.value === 'Bonita API'","type":"text","bond":"expression"},{"label":"Content","name":"content","help":"Array used to populate the table. Can be a list of objects. Use 'Column keys' to refine content","showFor":"properties.type.value === 'Variable'","type":"text","bond":"expression"},{"label":"Columns key","name":"columnsKey","caption":"Comma-separated list","help":"When 'Content' is a list of objects, specifies the attributes to display in the table columns","type":"collection","bond":"expression"},{"label":"Sortable columns","name":"sortColumns","caption":"List from column keys","help":"BDM APIs are not yet sortable. For other APIs, test in the preview or refer to the BonitaBPM documentation 'REST API' pages","showFor":"properties.type.value === 'Bonita API'","type":"collection","bond":"expression"},{"label":"Selected Row","name":"selectedRow","type":"text","bond":"variable"},{"label":"Default Page size","name":"defaultPageSize","type":"integer","defaultValue":5,"bond":"expression"},{"label":"Filter","name":"filter","help":"Bind to a Variable to filter the table 'Content'","type":"text","bond":"expression"},{"label":"Actions","name":"actions","caption":"A JSON collection of action descriptions","help":"Each action contains a name, glyphicon, service, method and key/value arguments","type":"text","bond":"variable"},{"label":"Is empty","name":"isEmpty","type":"text","bond":"variable"},{"label":"Highlighted rows","name":"highlightedRows","type":"collection","bond":"expression"},{"label":"Highlighted rows property","name":"highlightedRowsProperty","type":"text","bond":"expression"},{"label":"Default sort column","name":"defaultSortColumn","type":"text","bond":"expression"},{"label":"Default sort order","name":"defaultSortOrder","type":"text","defaultValue":"ASC","bond":"expression"},{"label":"Page Sizes","name":"pageSizes","type":"collection","defaultValue":["2","5","10","20","50"],"bond":"expression"},{"label":"Titulo columna acciones","name":"actionsTitle","help":"Titulo de la columna de acciones","type":"text","defaultValue":"Acciones","bond":"expression"}],"assets":[{"name":"bonita-lib-tpl-0.5.21.js","type":"js","order":0,"external":false},{"name":"bonita-lib-0.5.21.css","type":"css","order":1,"external":false},{"id":"55d10f79-e0ac-4670-8633-77c16efc61a7","name":"table-settings.css","type":"css","order":0,"external":false}],"requiredModules":["org.bonitasoft.templates","ui.bootstrap.pagination","template/pagination/pagination.html","org.bonitasoft.bonitable","org.bonitasoft.bonitable.sortable","org.bonitasoft.bonitable.settings"],"type":"widget"}